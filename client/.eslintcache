[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js":"6","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js":"7","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/DogIcon.js":"8","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCatalog.js":"9"},{"size":484,"mtime":1609027700211,"results":"10","hashOfConfig":"11"},{"size":3150,"mtime":1672617766572,"results":"12","hashOfConfig":"11"},{"size":2594,"mtime":1649552049733,"results":"13","hashOfConfig":"11"},{"size":1676,"mtime":1672612736368,"results":"14","hashOfConfig":"11"},{"size":5428,"mtime":1672612597948,"results":"15","hashOfConfig":"11"},{"size":8404,"mtime":1649032457340,"results":"16","hashOfConfig":"11"},{"size":6131,"mtime":1672611634874,"results":"17","hashOfConfig":"11"},{"size":1140,"mtime":1672337610370,"results":"18","hashOfConfig":"11"},{"size":28782,"mtime":1672614744180,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1yhrrie",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["43","44"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["45"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["46","47","48","49","50","51"],"import React, { useState, useEffect } from \"react\";\nimport { Card, Badge } from \"antd\";\n\nconst { Meta } = Card;\n\nconst RecipeCard = ({\n  recipeInfo,\n  updateRecipe,\n  setFocusedRecipe,\n  showDrawer,\n}) => {\n  const [recipe, setRecipe] = useState(recipeInfo);\n  const [tagsToAdd, setTagsToAdd] = useState(\"\");\n  const [notesToAdd, setNotesToAdd] = useState(\"\");\n\n  useEffect(() => {\n    setRecipe(recipeInfo);\n  }, [recipeInfo]);\n\n  return (\n    <>\n      {recipe.has_made ? (\n        <Badge.Ribbon text=\"Cooked\" color=\"#d32f2f\">\n          <Card\n            style={{ maxWidth: \"300px\", width: \"100%\" }}\n            hoverable\n            onClick={() => {\n              setFocusedRecipe(recipe);\n              showDrawer();\n            }}\n            size=\"small\"\n            cover={\n              <img\n                src={\n                  recipe.img_src\n                    ? recipe.img_src\n                    : \"./static/graphics/default_image.jpg\"\n                }\n              />\n            }\n          >\n            <Meta description={recipe.title} />\n          </Card>\n        </Badge.Ribbon>\n      ) : (\n        <Card\n          style={{ maxWidth: \"300px\", width: \"100%\" }}\n          hoverable\n          onClick={() => {\n            setFocusedRecipe(recipe);\n            showDrawer();\n          }}\n          size=\"small\"\n          cover={\n            <img\n              src={\n                recipe.img_src\n                  ? recipe.img_src\n                  : \"./static/graphics/default_image.jpg\"\n              }\n            />\n          }\n        >\n          <Meta description={recipe.title} />\n        </Card>\n      )}\n    </>\n  );\n};\nexport default RecipeCard;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["52","53"],"import React, { useState } from \"react\";\nimport {\n  Space,\n  Button,\n  Checkbox,\n  Form,\n  Input,\n  TreeSelect,\n  Rate,\n  Tooltip,\n} from \"antd\";\n\nconst titleCase = (str) => {\n  if (str) {\n    return str\n      .toLowerCase()\n      .split(\" \")\n      .map(function (word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(\" \");\n  } else {\n    return \"\";\n  }\n};\n\nconst titleCaseArr = (arr) => {\n  return arr.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  });\n};\n\nconst RecipeEntry = ({\n  recipe,\n  unique_id,\n  url,\n  setRecipe,\n  closeModal,\n  setUrl,\n  handleCreate,\n  handleDelete,\n  quickTagOptions,\n  type,\n  setType,\n  setIsSubmitted,\n}) => {\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [tags, setTags] = useState(titleCaseArr(recipe.tags));\n  const [allNotes, setAllNotes] = useState(recipe.notes);\n  const [hasMade, setHasMade] = useState(false);\n  const [rating, setRating] = useState(0);\n\n  const { TextArea } = Input;\n\n  const createEntry = () => {\n    let notes = [...allNotes];\n\n    if (notes.length > 0) {\n      notes = notes.map((note) => {\n        return note.trim();\n      });\n    } else {\n      notes = [];\n    }\n\n    handleCreate({\n      unique_id: unique_id,\n      title: title,\n      url: url,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      notes: notes,\n      rating: rating,\n      tags: tags,\n    });\n    setRecipe({});\n    closeModal();\n    if (type === \"crawl\") {\n      handleDelete(recipe.unique_id, \"crawledrecipe\");\n    }\n    setUrl(\"\");\n    setIsSubmitted(false);\n    setType(\"\");\n  };\n\n  return (\n    <Space\n      id=\"recipe-entry\"\n      direction=\"vertical\"\n      size=\"small\"\n      style={{ display: \"flex\", width: \"100%\" }}\n    >\n      {imgSrc ? (\n        <img src={imgSrc} style={{ maxWidth: \"225px\", maxHeight: \"225px\" }} />\n      ) : (\n        <img src={\"./static/graphics/default_image.jpg\"} />\n      )}\n      <Form\n        name=\"form\"\n        style={{\n          width: \"100%\",\n        }}\n        labelCol={{ flex: \"100px\" }}\n        labelAlign=\"left\"\n        labelWrap\n        wrapperCol={{ flex: 1 }}\n        colon={false}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"Recipe URL\"\n          name=\"url\"\n          rules={[\n            { required: true, message: \"Please input the recipe's url!\" },\n          ]}\n        >\n          <Input\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n            disabled={type === \"blank\" ? false : true}\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Image\" name=\"image\">\n          <Input\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n          />\n        </Form.Item>\n\n        <Form.Item valuePropName=\"has_made\" wrapperCol={{ span: 24 }}>\n          <Checkbox\n            style={{ marginRight: \"15px\" }}\n            checked={hasMade}\n            onClick={() => setHasMade(!hasMade)}\n          >\n            Has Made?\n          </Checkbox>\n          <Rate value={rating} onChange={(rating) => setRating(rating)} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Recipe Title\"\n          name=\"title\"\n          rules={[\n            { required: true, message: \"Please input the recipe's title!\" },\n          ]}\n        >\n          <Input value={title} onChange={(e) => setTitle(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Author\" name=\"author\">\n          <Input value={author} onChange={(e) => setAuthor(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Description\" name=\"description\">\n          <TextArea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            autoSize={{ minRows: 1, maxRows: 4 }}\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Tags\" name=\"tags\">\n          <TreeSelect\n            treeData={quickTagOptions.sort(\n              (a, b) => -b.title.localeCompare(a.title)\n            )}\n            onChange={(tags) => {\n              setTags(tags);\n            }}\n            treeCheckable\n            placeholder=\"Please select\"\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Notes\" name=\"notes\">\n          <Tooltip\n            trigger={[\"focus\"]}\n            title=\"Delimit separate notes with ; \"\n            placement=\"top\"\n          >\n            <TextArea\n              value={allNotes.join(\";\")}\n              onChange={(e) => setAllNotes(e.target.value.split(\";\"))}\n              autoSize\n            />\n          </Tooltip>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 24 }}>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className={title.length && url.length ? \"btn-active\" : \"btn\"}\n            disabled={title.length && url.length ? false : true}\n            onClick={createEntry}\n            danger\n            block\n          >\n            Create Entry\n          </Button>\n        </Form.Item>\n      </Form>\n    </Space>\n  );\n};\n\nexport default RecipeEntry;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js",["54","55","56"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Space,\n  Button,\n  Checkbox,\n  Form,\n  Input,\n  TreeSelect,\n  Rate,\n  Tooltip,\n} from \"antd\";\n\nconst titleCase = (str) => {\n  if (str) {\n    return str\n      .toLowerCase()\n      .split(\" \")\n      .map(function (word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(\" \");\n  } else {\n    return \"\";\n  }\n};\n\nconst titleCaseArr = (arr) => {\n  return arr.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  });\n};\n\nconst RecipeEdit = ({\n  recipe,\n  updateFocusedRecipe,\n  quickTagOptions,\n  setIsEditing,\n  updateRecipe,\n}) => {\n  const [url, setUrl] = useState(recipe.url);\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [allTags, setAllTags] = useState(titleCaseArr(recipe.tags));\n  const [allNotes, setAllNotes] = useState(recipe.notes);\n  const [hasMade, setHasMade] = useState(recipe.has_made);\n  const [rating, setRating] = useState(recipe.rating);\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({\n      url: url,\n      imgSrc: imgSrc,\n      title: title,\n      author: author,\n      description: description,\n      tags: allTags,\n      notes: allNotes,\n      hasMade: hasMade,\n      rating: rating,\n    });\n  }, []);\n\n  const { TextArea } = Input;\n\n  const editEntry = () => {\n    let notes = [...allNotes];\n\n    if (notes.length > 0) {\n      notes = notes.map((note) => {\n        return note.trim();\n      });\n    } else {\n      notes = [];\n    }\n\n    const updatedRecipe = {\n      url: url,\n      title: title,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      rating: rating,\n      notes: notes,\n      tags: allTags,\n    };\n\n    updateRecipe(\n      \"edit_entry\",\n      recipe.unique_id,\n      updatedRecipe,\n      updateFocusedRecipe\n    );\n    setIsEditing(false);\n  };\n\n  return (\n    <Space\n      id=\"recipe-edit\"\n      direction=\"vertical\"\n      size=\"small\"\n      style={{ display: \"flex\", width: \"100%\" }}\n    >\n      <Button\n        className=\"btn-active\"\n        type=\"primary\"\n        block\n        style={{ marginBottom: \"10px\" }}\n        danger\n        onClick={() => setIsEditing(false)}\n      >\n        Cancel\n      </Button>\n      {imgSrc ? (\n        <img src={imgSrc} style={{ maxWidth: \"225px\", maxHeight: \"225px\" }} />\n      ) : (\n        <img src={\"./static/graphics/default_image.jpg\"} />\n      )}\n      <Form\n        name=\"form\"\n        form={form}\n        style={{\n          width: \"100%\",\n        }}\n        labelCol={{ flex: \"100px\" }}\n        labelAlign=\"left\"\n        labelWrap\n        wrapperCol={{ flex: 1 }}\n        colon={false}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"Recipe URL\"\n          name=\"url\"\n          rules={[\n            { required: true, message: \"Please input the recipe's url!\" },\n          ]}\n        >\n          <Input value={url} onChange={(e) => setUrl(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Recipe Image\"\n          name=\"imgSrc\"\n          style={{ marginBottom: \"15px\" }}\n        >\n          <Input\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n          />\n        </Form.Item>\n\n        <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n          <Form.Item name=\"hasMade\" wrapperCol={{ span: 24 }}>\n            <Checkbox\n              style={{ marginRight: \"15px\" }}\n              checked={hasMade}\n              onClick={() => setHasMade(!hasMade)}\n            >\n              Has Made?\n            </Checkbox>\n          </Form.Item>\n\n          <Form.Item name=\"rating\" wrapperCol={{ span: 24 }}>\n            <Rate value={rating} onChange={(rating) => setRating(rating)} />\n          </Form.Item>\n        </div>\n\n        <Form.Item\n          label=\"Recipe Title\"\n          name=\"title\"\n          rules={[\n            { required: true, message: \"Please input the recipe's title!\" },\n          ]}\n        >\n          <Input value={title} onChange={(e) => setTitle(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Author\" name=\"author\">\n          <Input value={author} onChange={(e) => setAuthor(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Description\" name=\"description\">\n          <TextArea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            autoSize={{ minRows: 1, maxRows: 4 }}\n            allowClear\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Tags\" name=\"tags\" wrapperCol={{ span: 12 }}>\n          <TreeSelect\n            treeData={quickTagOptions.sort(\n              (a, b) => -b.title.localeCompare(a.title)\n            )}\n            onChange={(tags) => {\n              setAllTags(tags);\n            }}\n            treeCheckable\n            placeholder=\"Please select\"\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Notes\" name=\"notes\">\n          <Tooltip\n            trigger={[\"focus\"]}\n            title=\"Delimit separate notes with ; \"\n            placement=\"top\"\n          >\n            <TextArea\n              value={allNotes.join(\";\")}\n              onChange={(e) => setAllNotes(e.target.value.split(\";\"))}\n              autoSize\n            />\n          </Tooltip>\n        </Form.Item>\n\n        <Form.Item wrapperCol={{ span: 24 }}>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className={title.length && url.length ? \"btn-active\" : \"btn\"}\n            disabled={title.length && url.length ? false : true}\n            onClick={editEntry}\n            danger\n            block\n          >\n            Update Recipe\n          </Button>\n        </Form.Item>\n      </Form>\n    </Space>\n  );\n};\n\nexport default RecipeEdit;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/DogIcon.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCatalog.js",["57","58","59","60","61","62","63","64","65","66","67","68"],"import React, { useState, useEffect } from \"react\";\nimport RecipeCard from \"./RecipeCard\";\nimport RecipeEntry from \"./RecipeEntry\";\nimport RecipeEdit from \"./RecipeEdit\";\nimport { DogIcon } from \"./DogIcon\";\nimport moment from \"moment\";\nimport \"antd/dist/reset.css\";\nimport \"../App.css\";\nimport * as api from \"../utils/api\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  Layout,\n  Typography,\n  Col,\n  Row,\n  Drawer,\n  Divider,\n  Button,\n  Rate,\n  Tabs,\n  Timeline,\n  Input,\n  Tag,\n  Select,\n  AutoComplete,\n  FloatButton,\n  Modal,\n  Space,\n  Spin,\n  Form,\n  Popconfirm,\n  Radio,\n} from \"antd\";\nimport {\n  PlusOutlined,\n  PlusCircleOutlined,\n  EditOutlined,\n  DeleteOutlined,\n  QuestionCircleOutlined,\n} from \"@ant-design/icons\";\n\nfunction RecipeCatalog() {\n  const [url, setUrl] = useState(\"\");\n  const [crawlingStatus, setCrawlingStatus] = useState(null);\n  const [allRecipes, setAllRecipes] = useState(null);\n  const [taskID, setTaskID] = useState(null);\n  const [uniqueID, setUniqueID] = useState(null);\n  const [filteredRecipes, setFilteredRecipes] = useState([]);\n  const [focusedRecipe, setFocusedRecipe] = useState(null);\n  const [searchOptions, setSearchOptions] = useState({});\n  const [sortBy, setSortBy] = useState(\"-timestamp\");\n  const [query, setQuery] = useState(\"\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [crawledRecipe, setCrawledRecipe] = useState({});\n  const [hadError, setHadError] = useState(false);\n\n  const [open, setOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [entryType, setEntryType] = useState(\"\");\n\n  const [inputVisible, setInputVisible] = useState(false);\n\n  const { Header, Content } = Layout;\n  const { Title, Link } = Typography;\n  const [tagForm] = Form.useForm();\n  const [noteForm] = Form.useForm();\n\n  let statusInterval = 1;\n\n  useEffect(() => {\n    apiStateReferences();\n  }, [sortBy]);\n\n  async function apiStateReferences() {\n    api.getAll(setAllRecipes, setFilteredRecipes, sortBy);\n  }\n\n  async function handleCreate(recipe) {\n    api.createRecipe(recipe, apiStateReferences);\n  }\n\n  async function handleDelete(unique_id, route) {\n    api.deleteRecipe(unique_id, route, apiStateReferences);\n  }\n\n  async function startCrawl() {\n    if (!url) {\n      return false;\n    }\n    const response = await fetch(\"crawl/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ method: \"POST\", url: url }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setTaskID(data.task_id);\n        setUniqueID(data.unique_id);\n        setCrawlingStatus(data.status);\n        statusInterval = setInterval(\n          () => checkCrawlStatus(data.task_id, data.unique_id),\n          2000\n        );\n      })\n      .catch((error) => console.error(\"Error:\", error));\n  }\n\n  async function checkCrawlStatus(task_id, unique_id) {\n    const data = JSON.stringify({\n      method: \"GET\",\n      task_id: task_id,\n      unique_id: unique_id,\n    });\n    // Making a request to server to ask status of crawling job\n    const response = await fetch(\n      \"crawl/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: data,\n      },\n      data\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.data) {\n          clearInterval(statusInterval);\n          setCrawlingStatus(\"finished\");\n          setCrawledRecipe(data.data);\n        } else if (data.error) {\n          console.log(data.error);\n          clearInterval(statusInterval);\n          setCrawlingStatus(\"finished\");\n          setHadError(true);\n          let newID = uuidv4();\n          setCrawledRecipe({\n            unique_id: newID,\n            url: url,\n            title: \"\",\n            author: \"\",\n            description: \"\",\n            has_made: false,\n            img_src: \"\",\n            notes: [],\n            rating: 0,\n            tags: [],\n            timestamp: Date.now(),\n          });\n        } else if (data.status) {\n          setCrawlingStatus(data.status);\n        }\n      });\n  }\n\n  useEffect(() => {\n    if (allRecipes !== null) {\n      let arr = {\n        tags: [],\n        allOptions: [],\n      };\n      allRecipes.forEach((recipe) => {\n        let tags = recipe.tags;\n        let cleanedTitle = recipe.title.trim();\n        tags.forEach((tag) => {\n          if (tag.length) {\n            let cleanedTag = tag.toLowerCase().trim();\n            if (!arr.tags.includes(cleanedTag)) {\n              arr.tags.push(cleanedTag);\n            }\n            if (!arr.allOptions.includes(cleanedTag)) {\n              arr.allOptions.push(cleanedTag);\n            }\n          }\n        });\n        if (!arr.allOptions.includes(cleanedTitle)) {\n          arr.allOptions.push(cleanedTitle);\n        }\n      });\n      let options = arr.tags.map((option) => {\n        if (option.length) {\n          // const firstLetter = option[0].toUpperCase();\n          option = option.split(\" \").map(function (word) {\n            return word.replace(word[0], word[0].toUpperCase());\n          });\n          return {\n            title: option[0],\n            key: option[0],\n            value: option[0],\n          };\n        }\n      });\n      arr.tags = options;\n      arr.allOptions.sort();\n      setSearchOptions(arr);\n    }\n  }, [allRecipes]);\n\n  useEffect(() => {\n    if (allRecipes !== null) {\n      const searchAllRegex = query && new RegExp(`${query}`, \"gi\");\n      const result = allRecipes.filter(\n        (recipe) =>\n          !searchAllRegex ||\n          searchAllRegex.test(recipe.title) +\n            searchAllRegex.test(recipe.author) +\n            searchAllRegex.test(recipe.tags)\n      );\n      setFilteredRecipes(result);\n    }\n  }, [query, allRecipes]);\n\n  const connect = (e, type) => {\n    e.preventDefault();\n    if (type === \"crawl\") {\n      startCrawl();\n    } else {\n      setCrawledRecipe({\n        unique_id: uuidv4(),\n        url: url,\n        title: \"\",\n        author: \"\",\n        description: \"\",\n        has_made: false,\n        img_src: \"\",\n        notes: [],\n        rating: 0,\n        tags: [],\n        timestamp: Date.now(),\n      });\n    }\n  };\n\n  const disconnect = (type) => {\n    if (hadError == true) {\n      setHadError(false);\n    } else if (type === \"crawl\") {\n      handleDelete(uniqueID, \"crawledrecipe\");\n    }\n    setCrawledRecipe({});\n    setEntryType(\"\");\n    setIsSubmitted(false);\n  };\n\n  async function handleUpdate(field, unique_id, value, setState) {\n    if (value !== null) {\n      switch (field) {\n        case \"has_made\":\n          api.updateHasMade(unique_id, value, setState);\n          break;\n        case \"rating\":\n          api.updateRating(unique_id, value, setState);\n          break;\n        case \"notes_add\":\n          api.addNotes(unique_id, value, setState);\n          break;\n        case \"notes_remove\":\n          api.removeNotes(unique_id, value, setState);\n          break;\n        case \"tags_add\":\n          api.addTags(unique_id, value, setState);\n          break;\n        case \"tags_remove\":\n          api.removeTags(unique_id, value, setState);\n          break;\n        case \"edit_entry\":\n          api.editEntry(unique_id, value, setState);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  const updateFocusedRecipe = (updatedRecipe) => {\n    setFocusedRecipe(updatedRecipe);\n    let stateCopy = [...allRecipes];\n    let index = stateCopy.findIndex(\n      (obj) => obj.unique_id === updatedRecipe.unique_id\n    );\n    stateCopy[index] = updatedRecipe;\n    setAllRecipes(stateCopy);\n  };\n\n  const showInput = () => {\n    setInputVisible(true);\n  };\n\n  const handleInputConfirm = (newTag) => {\n    if (\n      newTag.toLowerCase() &&\n      focusedRecipe.tags.indexOf(newTag.toLowerCase()) === -1\n    ) {\n      handleUpdate(\n        \"tags_add\",\n        focusedRecipe.unique_id,\n        newTag.toLowerCase(),\n        updateFocusedRecipe\n      );\n      setInputVisible(false);\n    }\n  };\n\n  // Modal Functions\n  const showModal = (type) => {\n    document.body.style.overflow = \"hidden\";\n    setEntryType(type);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    document.body.style.overflow = \"unset\";\n    setIsModalOpen(false);\n    setEntryType(\"\");\n  };\n\n  // Drawer Functions\n  const showDrawer = () => {\n    document.body.style.overflow = \"hidden\";\n    changeTab(1);\n    setOpen(true);\n  };\n\n  const onClose = () => {\n    document.body.style.overflow = \"unset\";\n    setOpen(false);\n    setIsEditing(false);\n  };\n\n  // Tab Functions\n  const changeTab = (key) => {\n    console.log(key);\n  };\n\n  const titleCase = (str) => {\n    if (str) {\n      return str\n        .toLowerCase()\n        .split(\" \")\n        .map(function (word) {\n          return word.charAt(0).toUpperCase() + word.slice(1);\n        })\n        .join(\" \");\n    } else {\n      return \"\";\n    }\n  };\n\n  return (\n    <>\n      <Layout id=\"layout\" style={{ minHeight: \"100%\" }}>\n        <Header\n          id=\"header\"\n          style={{\n            backgroundColor: \"#fff\",\n            padding: \"10px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div>\n            <Title\n              style={{\n                margin: \"5px\",\n              }}\n            >\n              Dog-Ear\n            </Title>\n          </div>\n          <div className=\"dog-image\">\n            <img src=\"./static/graphics/dog.png\" alt=\"Woof woof\" />\n          </div>\n        </Header>\n        <Header\n          style={{\n            position: \"sticky\",\n            top: 0,\n            zIndex: 1,\n            backgroundColor: \"#fff\",\n            padding: \"10px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            borderBottom: \"1px solid #d32f2f\",\n          }}\n        >\n          <div style={{ width: \"50%\" }}>\n            <Select\n              labelInValue\n              bordered={false}\n              defaultValue={{ value: \"Newest\", label: \"Newest\" }}\n              style={{ maxWidth: \"100%\" }}\n              onChange={(value) => [setSortBy(value.value), setQuery(\"\")]}\n              options={[\n                {\n                  value: \"-timestamp\",\n                  label: \"Newest\",\n                },\n                {\n                  value: \"timestamp\",\n                  label: \"Oldest\",\n                },\n                {\n                  value: \"-rating\",\n                  label: \"Highest Rated\",\n                },\n                {\n                  value: \"title\",\n                  label: \"Title A-Z\",\n                },\n                {\n                  value: \"-title\",\n                  label: \"Title Z-A\",\n                },\n                {\n                  value: \"-has_made\",\n                  label: \"Has Been Cooked\",\n                },\n                {\n                  value: \"has_made\",\n                  label: \"Has NOT Been Cooked\",\n                },\n              ]}\n            />\n          </div>\n          <div style={{ width: \"50%\", textAlign: \"right\" }}>\n            <AutoComplete\n              style={{ maxWidth: \"100%\", width: \"200px\", textAlign: \"left\" }}\n              onSelect={(value) => setQuery(value)}\n              onSearch={(value) => setQuery(value)}\n              allowClear\n              value={query}\n              placeholder=\"Search Recipes\"\n              options={\n                searchOptions.allOptions\n                  ? searchOptions.allOptions.map((option) => {\n                      return {\n                        value: option,\n                        label: option,\n                      };\n                    })\n                  : \"\"\n              }\n            />\n          </div>\n        </Header>\n        <Content\n          style={{\n            margin: \"15px\",\n          }}\n        >\n          <Row\n            justify=\"space-around\"\n            xs=\"auto\"\n            gutter={[16, 16]}\n            key={uuidv4()}\n          >\n            {filteredRecipes.length ? (\n              filteredRecipes.map((recipe, i) => (\n                <Col\n                  flex\n                  xs={{ span: 12, offset: 0 }}\n                  md={{ span: 8, offset: 0 }}\n                  lg={{ span: 6, offset: 0 }}\n                  xl={{ span: 4, offset: 0 }}\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <RecipeCard\n                    recipeInfo={recipe}\n                    recipeNumber={i}\n                    quickTagOptions={searchOptions.tags}\n                    updateRecipe={handleUpdate}\n                    setFocusedRecipe={setFocusedRecipe}\n                    showDrawer={showDrawer}\n                    key={uuidv4()}\n                  />\n                </Col>\n              ))\n            ) : (\n              <Space\n                direction=\"vertical\"\n                style={{ width: \"100%\", marginTop: \"50px\" }}\n              >\n                <Spin tip=\"Loading\" size=\"large\">\n                  <div className=\"content\" />\n                </Spin>\n              </Space>\n            )}\n          </Row>\n          <Row>\n            {allRecipes ? (\n              <p style={{ margin: \"25px auto\" }}>\n                <em>You have saved {allRecipes.length} recipes to date!</em>\n              </p>\n            ) : null}\n          </Row>\n          <FloatButton.Group\n            icon={<PlusCircleOutlined />}\n            style={{ bottom: \"85px\" }}\n            type=\"primary\"\n            trigger=\"click\"\n          >\n            <FloatButton\n              icon={<DogIcon />}\n              onClick={() => showModal(\"crawl\")}\n              tooltip={<div>Scrape a Recipe</div>}\n            />\n            <FloatButton\n              onClick={(e) => [\n                setIsSubmitted(true),\n                showModal(\"blank\"),\n                connect(e, \"blank\"),\n              ]}\n              tooltip={<div>Blank Template</div>}\n            />\n          </FloatButton.Group>\n          <FloatButton.BackTop\n            style={{ bottom: \"25px\" }}\n            tooltip={<div>Back to Top</div>}\n          />\n        </Content>\n      </Layout>\n      {focusedRecipe !== null ? (\n        <Drawer\n          title={focusedRecipe.title}\n          placement=\"right\"\n          closable={true}\n          onClose={onClose}\n          open={open}\n          getContainer=\"#layout\"\n        >\n          {isEditing ? (\n            <RecipeEdit\n              recipe={focusedRecipe}\n              quickTagOptions={searchOptions.tags}\n              updateRecipe={handleUpdate}\n              updateFocusedRecipe={updateFocusedRecipe}\n              setIsEditing={setIsEditing}\n            />\n          ) : (\n            <>\n              <div className=\"drawer-div\">\n                <div className=\"drawer-div-actions\">\n                  <Radio.Group style={{ width: \"100%\", textAlign: \"center\" }}>\n                    <Popconfirm\n                      key=\"delete\"\n                      icon={<QuestionCircleOutlined style={{ color: \"red\" }} />}\n                      title=\"Are you sure??\"\n                      okText=\"Delete\"\n                      okType=\"danger\"\n                      placement=\"bottom\"\n                      onConfirm={() => (\n                        handleDelete(focusedRecipe.unique_id, \"recipes\"),\n                        onClose()\n                      )}\n                    >\n                      <Radio.Button style={{ width: \"50%\" }} className=\"btn\">\n                        <DeleteOutlined />\n                      </Radio.Button>\n                    </Popconfirm>\n                    <Radio.Button\n                      style={{ width: \"50%\" }}\n                      onClick={() => setIsEditing(true)}\n                    >\n                      <EditOutlined key=\"edit\" />\n                    </Radio.Button>\n                  </Radio.Group>\n                </div>\n                <img\n                  src={\n                    focusedRecipe.img_src\n                      ? focusedRecipe.img_src\n                      : \"./static/graphics/default_image.jpg\"\n                  }\n                />\n              </div>\n              <div className=\"drawer-div\">\n                <Link href={focusedRecipe.url} target=\"_blank\">\n                  <Button\n                    className=\"btn-active\"\n                    type=\"primary\"\n                    block\n                    style={{ marginTop: \"10px\" }}\n                    danger\n                  >\n                    Visit Recipe\n                  </Button>\n                </Link>\n              </div>\n              <Divider />\n              <Tabs\n                defaultActiveKey=\"1\"\n                onChange={changeTab}\n                items={[\n                  {\n                    label: `Info`,\n                    key: \"1\",\n                    children: (\n                      <div className=\"drawer-div\">\n                        <p style={{ color: \"rgba(0, 0, 0, 0.6)\" }}>\n                          <strong>Saved On: </strong>\n                          {moment(focusedRecipe.timestamp).format(\n                            \"MMMM Do YYYY\"\n                          )}\n                        </p>\n                        <p>\n                          <strong>Author: </strong>\n                          <em>\n                            {focusedRecipe.author\n                              ? focusedRecipe.author\n                              : \"No Assigned Author\"}\n                          </em>\n                        </p>\n                        <div>\n                          <Button\n                            type={\n                              focusedRecipe.has_made ? \"primary\" : \"default\"\n                            }\n                            className={\n                              focusedRecipe.has_made ? \"btn-active\" : \"btn\"\n                            }\n                            onClick={(e) =>\n                              handleUpdate(\n                                \"has_made\",\n                                focusedRecipe.unique_id,\n                                focusedRecipe.has_made,\n                                updateFocusedRecipe\n                              )\n                            }\n                            danger\n                            shape=\"round\"\n                          >\n                            Cooked\n                          </Button>\n                          <Rate\n                            value={focusedRecipe.rating}\n                            onChange={(rating) =>\n                              handleUpdate(\n                                \"rating\",\n                                focusedRecipe.unique_id,\n                                rating,\n                                updateFocusedRecipe\n                              )\n                            }\n                          />\n                        </div>\n                        <p>\n                          {focusedRecipe.description ? (\n                            focusedRecipe.description\n                          ) : (\n                            <em>There is no description for this</em>\n                          )}\n                        </p>\n                      </div>\n                    ),\n                  },\n                  {\n                    label: `Tags/Notes`,\n                    key: \"2\",\n                    children: (\n                      <>\n                        <Divider orientation=\"left\">\n                          <strong>\n                            <em>Tagged As:</em>\n                          </strong>\n                        </Divider>\n                        {focusedRecipe.tags.length > 0 ? (\n                          focusedRecipe.tags.map((tag, index) => {\n                            return (\n                              <>\n                                <Tag\n                                  color=\"#d32f2f\"\n                                  key={uuidv4()}\n                                  className=\"edit-tag tag-input\"\n                                >\n                                  {titleCase(tag)}\n                                </Tag>\n                              </>\n                            );\n                          })\n                        ) : (\n                          <p>\n                            <em>This recipe has not been tagged yet</em>\n                          </p>\n                        )}\n                        {inputVisible && (\n                          <Form\n                            name=\"new-tag-form\"\n                            form={tagForm}\n                            id=\"new-tag-form\"\n                            onFinish={(value) => (\n                              value.newTag\n                                ? handleInputConfirm(value.newTag.trim())\n                                : null,\n                              tagForm.resetFields()\n                            )}\n                          >\n                            <Form.Item name=\"newTag\">\n                              <Input\n                                type=\"text\"\n                                size=\"small\"\n                                className=\"tag-input\"\n                                placeholder=\"Add a new tag\"\n                              />\n                            </Form.Item>\n                            <Form.Item>\n                              <Button\n                                className=\"btn-active\"\n                                htmlType=\"submit\"\n                                type=\"primary\"\n                              >\n                                Add\n                              </Button>\n                            </Form.Item>\n                          </Form>\n                        )}\n                        {!inputVisible && (\n                          <div id=\"new-tag-div\">\n                            <Tag\n                              className=\"site-tag-plus\"\n                              style={{ border: \"1px dashed #d32f2f\" }}\n                              onClick={showInput}\n                            >\n                              <PlusOutlined /> New Tag\n                            </Tag>\n                          </div>\n                        )}\n                        <Divider orientation=\"left\">\n                          <strong>\n                            <em>Notes:</em>\n                          </strong>\n                        </Divider>\n                        <Form\n                          name=\"new-notes-form\"\n                          form={noteForm}\n                          style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            marginBottom: \"20px\",\n                          }}\n                          autoComplete=\"off\"\n                          onFinish={(value) => (\n                            handleUpdate(\n                              \"notes_add\",\n                              focusedRecipe.unique_id,\n                              value.newNote.trim(),\n                              updateFocusedRecipe\n                            ),\n                            noteForm.resetFields()\n                          )}\n                        >\n                          <Form.Item name=\"newNote\" style={{ width: \"100%\" }}>\n                            <Input.TextArea\n                              id=\"new-note-textarea\"\n                              placeholder=\"Add a new note\"\n                              allowClear\n                              autoSize\n                            />\n                          </Form.Item>\n                          <Form.Item>\n                            <Button\n                              id=\"new-note-button\"\n                              className=\"btn-active\"\n                              htmlType=\"submit\"\n                              type=\"primary\"\n                              style={{ height: \"100%\" }}\n                            >\n                              Add\n                            </Button>\n                          </Form.Item>\n                        </Form>\n                        <Timeline>\n                          {focusedRecipe.notes.length > 0 ? (\n                            focusedRecipe.notes.map((note) => {\n                              return (\n                                <Timeline.Item color=\"#d32f2f\" key={uuidv4()}>\n                                  {note}\n                                </Timeline.Item>\n                              );\n                            })\n                          ) : (\n                            <Timeline.Item color=\"#d32f2f\">\n                              <em>This recipe has no notes yet</em>\n                            </Timeline.Item>\n                          )}\n                        </Timeline>\n                      </>\n                    ),\n                  },\n                ]}\n              />\n            </>\n          )}\n        </Drawer>\n      ) : null}\n      <Modal\n        title={\n          entryType === \"crawl\"\n            ? Object.keys(crawledRecipe).length\n              ? \"Scraped Recipe Information\"\n              : \"Retrieving Recipe\"\n            : \"Blank Recipe Template\"\n        }\n        closable={\n          entryType === \"blank\" ||\n          Object.keys(crawledRecipe).length ||\n          !isSubmitted\n            ? true\n            : false\n        }\n        footer={null}\n        style={{ top: 20 }}\n        open={isModalOpen}\n        onCancel={() => [closeModal(), disconnect(entryType), setUrl(\"\")]}\n      >\n        {(url || entryType === \"blank\") && isSubmitted ? (\n          <div>\n            {Object.keys(crawledRecipe).length ? (\n              <div>\n                {hadError ? (\n                  <p>\n                    <em>\n                      The Recipe could not be scraped. Please input the recipe\n                      information manually:\n                    </em>\n                  </p>\n                ) : (\n                  <></>\n                )}\n                <RecipeEntry\n                  recipe={crawledRecipe}\n                  key={crawledRecipe.unique_id}\n                  unique_id={crawledRecipe.unique_id}\n                  url={url}\n                  setRecipe={setCrawledRecipe}\n                  setIsSubmitted={setIsSubmitted}\n                  handleCreate={handleCreate}\n                  handleDelete={handleDelete}\n                  setUrl={setUrl}\n                  quickTagOptions={searchOptions.tags}\n                  type={entryType}\n                  setType={setEntryType}\n                  closeModal={closeModal}\n                />\n              </div>\n            ) : (\n              <>\n                <div className=\"dog-loader\">\n                  <div className=\"dog-head\">\n                    <img src=\"./static/graphics/dog-head.png\" />\n                  </div>\n                  <div className=\"dog-body\"></div>\n                </div>\n                <p className=\"dog-loader-p\">\n                  <em>Fetching deliciousness...</em>\n                </p>\n              </>\n            )}\n          </div>\n        ) : (\n          <div>\n            <Form\n              name=\"urlForm\"\n              style={{\n                width: \"100%\",\n              }}\n              labelCol={{ flex: \"100px\" }}\n              labelAlign=\"left\"\n              labelWrap\n              wrapperCol={{ flex: 1 }}\n              colon={false}\n              autoComplete=\"off\"\n              onFinish={(e) => [\n                e.preventDefault,\n                setEntryType(\"crawl\"),\n                setIsSubmitted(true),\n                connect(e, \"crawl\"),\n              ]}\n            >\n              <Form.Item name=\"url\" label=\"URL\" rules={[{ required: true }]}>\n                <Input\n                  placeholder=\"Paste Recipe URL Here\"\n                  allowClear\n                  value={setEntryType !== \"blank\" ? url : null}\n                  onChange={(e) => setUrl(e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item name=\"scrapeSubmit\">\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  className={url.length ? \"btn-active\" : \"btn\"}\n                  disabled={url.length ? false : true}\n                  danger\n                  block\n                >\n                  Get Recipe\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        )}\n      </Modal>\n    </>\n  );\n}\n\nexport default RecipeCatalog;\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"73","severity":1,"message":"77","line":13,"column":10,"nodeType":"75","messageId":"76","endLine":13,"endColumn":19},{"ruleId":"73","severity":1,"message":"78","line":13,"column":21,"nodeType":"75","messageId":"76","endLine":13,"endColumn":33},{"ruleId":"73","severity":1,"message":"79","line":14,"column":10,"nodeType":"75","messageId":"76","endLine":14,"endColumn":20},{"ruleId":"73","severity":1,"message":"80","line":14,"column":22,"nodeType":"75","messageId":"76","endLine":14,"endColumn":35},{"ruleId":"81","severity":1,"message":"82","line":33,"column":15,"nodeType":"83","endLine":39,"endColumn":17},{"ruleId":"81","severity":1,"message":"82","line":55,"column":13,"nodeType":"83","endLine":61,"endColumn":15},{"ruleId":"81","severity":1,"message":"82","line":99,"column":9,"nodeType":"83","endLine":99,"endColumn":79},{"ruleId":"81","severity":1,"message":"82","line":101,"column":9,"nodeType":"83","endLine":101,"endColumn":60},{"ruleId":"84","severity":1,"message":"85","line":64,"column":6,"nodeType":"86","endLine":64,"endColumn":8,"suggestions":"87"},{"ruleId":"81","severity":1,"message":"82","line":118,"column":9,"nodeType":"83","endLine":118,"endColumn":79},{"ruleId":"81","severity":1,"message":"82","line":120,"column":9,"nodeType":"83","endLine":120,"endColumn":60},{"ruleId":"73","severity":1,"message":"88","line":44,"column":10,"nodeType":"75","messageId":"76","endLine":44,"endColumn":24},{"ruleId":"73","severity":1,"message":"89","line":46,"column":10,"nodeType":"75","messageId":"76","endLine":46,"endColumn":16},{"ruleId":"84","severity":1,"message":"90","line":73,"column":6,"nodeType":"86","endLine":73,"endColumn":14,"suggestions":"91"},{"ruleId":"73","severity":1,"message":"92","line":91,"column":11,"nodeType":"75","messageId":"76","endLine":91,"endColumn":19},{"ruleId":"73","severity":1,"message":"92","line":118,"column":11,"nodeType":"75","messageId":"76","endLine":118,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":184,"column":43,"nodeType":"95","messageId":"96","endLine":184,"endColumn":45},{"ruleId":"97","severity":1,"message":"98","line":239,"column":18,"nodeType":"99","messageId":"100","endLine":239,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":561,"column":73,"nodeType":"103","messageId":"104","endLine":561,"endColumn":74},{"ruleId":"81","severity":1,"message":"82","line":577,"column":17,"nodeType":"83","endLine":583,"endColumn":19},{"ruleId":"101","severity":1,"message":"102","line":702,"column":39,"nodeType":"103","messageId":"104","endLine":702,"endColumn":40},{"ruleId":"101","severity":1,"message":"102","line":756,"column":30,"nodeType":"103","messageId":"104","endLine":756,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":858,"column":21,"nodeType":"83","endLine":858,"endColumn":65},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'tagsToAdd' is assigned a value but never used.","'setTagsToAdd' is assigned a value but never used.","'notesToAdd' is assigned a value but never used.","'setNotesToAdd' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allNotes', 'allTags', 'author', 'description', 'form', 'hasMade', 'imgSrc', 'rating', 'title', and 'url'. Either include them or remove the dependency array.","ArrayExpression",["107"],"'crawlingStatus' is assigned a value but never used.","'taskID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.",["108"],"'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [allNotes, allTags, author, description, form, hasMade, imgSrc, rating, title, url]",{"range":"113","text":"114"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"115","text":"116"},[1488,1490],"[allNotes, allTags, author, description, form, hasMade, imgSrc, rating, title, url]",[1945,1953],"[apiStateReferences, sortBy]"]