[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js":"6","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/DogIcon.js":"7","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCatalog.js":"8"},{"size":484,"mtime":1609027700211,"results":"9","hashOfConfig":"10"},{"size":3150,"mtime":1672617766572,"results":"11","hashOfConfig":"10"},{"size":2594,"mtime":1649552049733,"results":"12","hashOfConfig":"10"},{"size":1676,"mtime":1672612736368,"results":"13","hashOfConfig":"10"},{"size":5428,"mtime":1672612597948,"results":"14","hashOfConfig":"10"},{"size":6131,"mtime":1672611634874,"results":"15","hashOfConfig":"10"},{"size":1140,"mtime":1672337610370,"results":"16","hashOfConfig":"10"},{"size":28749,"mtime":1672620885715,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1yhrrie",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["39","40"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["41"],"import React, { useState, useEffect } from \"react\";\nimport RecipeCatalog from \"./Components/RecipeCatalog\";\nimport { Layout, Button, Form, Input, Typography } from \"antd\";\n\nfunction App() {\n  const [credentials, setCredentials] = useState({});\n  const [loginForm] = Form.useForm();\n  const { Content } = Layout;\n  const { Title } = Typography;\n\n  const onFinish = (values) => {\n    if (\n      values.username === \"js.woodward@gmail.com\" &&\n      values.password === \"read2day\"\n    ) {\n      setCredentials(values);\n    } else {\n      onFinishFailed();\n      loginForm.resetFields();\n    }\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    setCredentials({});\n  };\n\n  return (\n    <>\n      {Object.keys(credentials).length ? (\n        <RecipeCatalog />\n      ) : (\n        <Layout id=\"layout\" style={{ minHeight: \"100%\" }}>\n          <Content\n            style={{\n              display: \"flex\",\n              height: \"100%\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Form\n              name=\"basic\"\n              form={loginForm}\n              style={{\n                background: \"#fff\",\n                padding: \"15px\",\n                border: \"1px solid rgba(5, 5, 5, 0.06)\",\n                borderRadius: \"8px\",\n              }}\n              labelCol={{\n                span: 8,\n              }}\n              wrapperCol={{\n                span: 16,\n              }}\n              initialValues={{\n                remember: true,\n              }}\n              onFinish={(values) => onFinish(values)}\n              onFinishFailed={onFinishFailed}\n              autoComplete=\"off\"\n            >\n              <div id=\"log-in-title\">\n                <Title\n                  style={{\n                    margin: \"5px\",\n                  }}\n                >\n                  Dog-Ear\n                </Title>\n                <div className=\"dog-image\">\n                  <img src=\"./static/graphics/dog.png\" alt=\"Woof woof\" />\n                </div>\n              </div>\n              <Form.Item\n                label=\"Username\"\n                name=\"username\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"Please input your username!\",\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n\n              <Form.Item\n                label=\"Password\"\n                name=\"password\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"Please input your password!\",\n                  },\n                ]}\n              >\n                <Input.Password />\n              </Form.Item>\n\n              <Form.Item\n                wrapperCol={{\n                  offset: 8,\n                  span: 16,\n                }}\n              >\n                <Button type=\"primary\" htmlType=\"submit\" className=\"btn-active\">\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </Content>\n        </Layout>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["42","43","44","45","46","47"],"import React, { useState, useEffect } from \"react\";\nimport { Card, Badge } from \"antd\";\n\nconst { Meta } = Card;\n\nconst RecipeCard = ({\n  recipeInfo,\n  updateRecipe,\n  setFocusedRecipe,\n  showDrawer,\n}) => {\n  const [recipe, setRecipe] = useState(recipeInfo);\n  const [tagsToAdd, setTagsToAdd] = useState(\"\");\n  const [notesToAdd, setNotesToAdd] = useState(\"\");\n\n  useEffect(() => {\n    setRecipe(recipeInfo);\n  }, [recipeInfo]);\n\n  return (\n    <>\n      {recipe.has_made ? (\n        <Badge.Ribbon text=\"Cooked\" color=\"#d32f2f\">\n          <Card\n            style={{ maxWidth: \"300px\", width: \"100%\" }}\n            hoverable\n            onClick={() => {\n              setFocusedRecipe(recipe);\n              showDrawer();\n            }}\n            size=\"small\"\n            cover={\n              <img\n                src={\n                  recipe.img_src\n                    ? recipe.img_src\n                    : \"./static/graphics/default_image.jpg\"\n                }\n              />\n            }\n          >\n            <Meta description={recipe.title} />\n          </Card>\n        </Badge.Ribbon>\n      ) : (\n        <Card\n          style={{ maxWidth: \"300px\", width: \"100%\" }}\n          hoverable\n          onClick={() => {\n            setFocusedRecipe(recipe);\n            showDrawer();\n          }}\n          size=\"small\"\n          cover={\n            <img\n              src={\n                recipe.img_src\n                  ? recipe.img_src\n                  : \"./static/graphics/default_image.jpg\"\n              }\n            />\n          }\n        >\n          <Meta description={recipe.title} />\n        </Card>\n      )}\n    </>\n  );\n};\nexport default RecipeCard;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["48","49"],"import React, { useState } from \"react\";\nimport {\n  Space,\n  Button,\n  Checkbox,\n  Form,\n  Input,\n  TreeSelect,\n  Rate,\n  Tooltip,\n} from \"antd\";\n\nconst titleCase = (str) => {\n  if (str) {\n    return str\n      .toLowerCase()\n      .split(\" \")\n      .map(function (word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(\" \");\n  } else {\n    return \"\";\n  }\n};\n\nconst titleCaseArr = (arr) => {\n  return arr.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  });\n};\n\nconst RecipeEntry = ({\n  recipe,\n  unique_id,\n  url,\n  setRecipe,\n  closeModal,\n  setUrl,\n  handleCreate,\n  handleDelete,\n  quickTagOptions,\n  type,\n  setType,\n  setIsSubmitted,\n}) => {\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [tags, setTags] = useState(titleCaseArr(recipe.tags));\n  const [allNotes, setAllNotes] = useState(recipe.notes);\n  const [hasMade, setHasMade] = useState(false);\n  const [rating, setRating] = useState(0);\n\n  const { TextArea } = Input;\n\n  const createEntry = () => {\n    let notes = [...allNotes];\n\n    if (notes.length > 0) {\n      notes = notes.map((note) => {\n        return note.trim();\n      });\n    } else {\n      notes = [];\n    }\n\n    handleCreate({\n      unique_id: unique_id,\n      title: title,\n      url: url,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      notes: notes,\n      rating: rating,\n      tags: tags,\n    });\n    setRecipe({});\n    closeModal();\n    if (type === \"crawl\") {\n      handleDelete(recipe.unique_id, \"crawledrecipe\");\n    }\n    setUrl(\"\");\n    setIsSubmitted(false);\n    setType(\"\");\n  };\n\n  return (\n    <Space\n      id=\"recipe-entry\"\n      direction=\"vertical\"\n      size=\"small\"\n      style={{ display: \"flex\", width: \"100%\" }}\n    >\n      {imgSrc ? (\n        <img src={imgSrc} style={{ maxWidth: \"225px\", maxHeight: \"225px\" }} />\n      ) : (\n        <img src={\"./static/graphics/default_image.jpg\"} />\n      )}\n      <Form\n        name=\"form\"\n        style={{\n          width: \"100%\",\n        }}\n        labelCol={{ flex: \"100px\" }}\n        labelAlign=\"left\"\n        labelWrap\n        wrapperCol={{ flex: 1 }}\n        colon={false}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"Recipe URL\"\n          name=\"url\"\n          rules={[\n            { required: true, message: \"Please input the recipe's url!\" },\n          ]}\n        >\n          <Input\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n            disabled={type === \"blank\" ? false : true}\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Image\" name=\"image\">\n          <Input\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n          />\n        </Form.Item>\n\n        <Form.Item valuePropName=\"has_made\" wrapperCol={{ span: 24 }}>\n          <Checkbox\n            style={{ marginRight: \"15px\" }}\n            checked={hasMade}\n            onClick={() => setHasMade(!hasMade)}\n          >\n            Has Made?\n          </Checkbox>\n          <Rate value={rating} onChange={(rating) => setRating(rating)} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Recipe Title\"\n          name=\"title\"\n          rules={[\n            { required: true, message: \"Please input the recipe's title!\" },\n          ]}\n        >\n          <Input value={title} onChange={(e) => setTitle(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Author\" name=\"author\">\n          <Input value={author} onChange={(e) => setAuthor(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Description\" name=\"description\">\n          <TextArea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            autoSize={{ minRows: 1, maxRows: 4 }}\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Tags\" name=\"tags\">\n          <TreeSelect\n            treeData={quickTagOptions.sort(\n              (a, b) => -b.title.localeCompare(a.title)\n            )}\n            onChange={(tags) => {\n              setTags(tags);\n            }}\n            treeCheckable\n            placeholder=\"Please select\"\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Notes\" name=\"notes\">\n          <Tooltip\n            trigger={[\"focus\"]}\n            title=\"Delimit separate notes with ; \"\n            placement=\"top\"\n          >\n            <TextArea\n              value={allNotes.join(\";\")}\n              onChange={(e) => setAllNotes(e.target.value.split(\";\"))}\n              autoSize\n            />\n          </Tooltip>\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 24 }}>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className={title.length && url.length ? \"btn-active\" : \"btn\"}\n            disabled={title.length && url.length ? false : true}\n            onClick={createEntry}\n            danger\n            block\n          >\n            Create Entry\n          </Button>\n        </Form.Item>\n      </Form>\n    </Space>\n  );\n};\n\nexport default RecipeEntry;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js",["50","51","52"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Space,\n  Button,\n  Checkbox,\n  Form,\n  Input,\n  TreeSelect,\n  Rate,\n  Tooltip,\n} from \"antd\";\n\nconst titleCase = (str) => {\n  if (str) {\n    return str\n      .toLowerCase()\n      .split(\" \")\n      .map(function (word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(\" \");\n  } else {\n    return \"\";\n  }\n};\n\nconst titleCaseArr = (arr) => {\n  return arr.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  });\n};\n\nconst RecipeEdit = ({\n  recipe,\n  updateFocusedRecipe,\n  quickTagOptions,\n  setIsEditing,\n  updateRecipe,\n}) => {\n  const [url, setUrl] = useState(recipe.url);\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [allTags, setAllTags] = useState(titleCaseArr(recipe.tags));\n  const [allNotes, setAllNotes] = useState(recipe.notes);\n  const [hasMade, setHasMade] = useState(recipe.has_made);\n  const [rating, setRating] = useState(recipe.rating);\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({\n      url: url,\n      imgSrc: imgSrc,\n      title: title,\n      author: author,\n      description: description,\n      tags: allTags,\n      notes: allNotes,\n      hasMade: hasMade,\n      rating: rating,\n    });\n  }, []);\n\n  const { TextArea } = Input;\n\n  const editEntry = () => {\n    let notes = [...allNotes];\n\n    if (notes.length > 0) {\n      notes = notes.map((note) => {\n        return note.trim();\n      });\n    } else {\n      notes = [];\n    }\n\n    const updatedRecipe = {\n      url: url,\n      title: title,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      rating: rating,\n      notes: notes,\n      tags: allTags,\n    };\n\n    updateRecipe(\n      \"edit_entry\",\n      recipe.unique_id,\n      updatedRecipe,\n      updateFocusedRecipe\n    );\n    setIsEditing(false);\n  };\n\n  return (\n    <Space\n      id=\"recipe-edit\"\n      direction=\"vertical\"\n      size=\"small\"\n      style={{ display: \"flex\", width: \"100%\" }}\n    >\n      <Button\n        className=\"btn-active\"\n        type=\"primary\"\n        block\n        style={{ marginBottom: \"10px\" }}\n        danger\n        onClick={() => setIsEditing(false)}\n      >\n        Cancel\n      </Button>\n      {imgSrc ? (\n        <img src={imgSrc} style={{ maxWidth: \"225px\", maxHeight: \"225px\" }} />\n      ) : (\n        <img src={\"./static/graphics/default_image.jpg\"} />\n      )}\n      <Form\n        name=\"form\"\n        form={form}\n        style={{\n          width: \"100%\",\n        }}\n        labelCol={{ flex: \"100px\" }}\n        labelAlign=\"left\"\n        labelWrap\n        wrapperCol={{ flex: 1 }}\n        colon={false}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"Recipe URL\"\n          name=\"url\"\n          rules={[\n            { required: true, message: \"Please input the recipe's url!\" },\n          ]}\n        >\n          <Input value={url} onChange={(e) => setUrl(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Recipe Image\"\n          name=\"imgSrc\"\n          style={{ marginBottom: \"15px\" }}\n        >\n          <Input\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n          />\n        </Form.Item>\n\n        <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n          <Form.Item name=\"hasMade\" wrapperCol={{ span: 24 }}>\n            <Checkbox\n              style={{ marginRight: \"15px\" }}\n              checked={hasMade}\n              onClick={() => setHasMade(!hasMade)}\n            >\n              Has Made?\n            </Checkbox>\n          </Form.Item>\n\n          <Form.Item name=\"rating\" wrapperCol={{ span: 24 }}>\n            <Rate value={rating} onChange={(rating) => setRating(rating)} />\n          </Form.Item>\n        </div>\n\n        <Form.Item\n          label=\"Recipe Title\"\n          name=\"title\"\n          rules={[\n            { required: true, message: \"Please input the recipe's title!\" },\n          ]}\n        >\n          <Input value={title} onChange={(e) => setTitle(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Author\" name=\"author\">\n          <Input value={author} onChange={(e) => setAuthor(e.target.value)} />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Description\" name=\"description\">\n          <TextArea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            autoSize={{ minRows: 1, maxRows: 4 }}\n            allowClear\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Tags\" name=\"tags\" wrapperCol={{ span: 12 }}>\n          <TreeSelect\n            treeData={quickTagOptions.sort(\n              (a, b) => -b.title.localeCompare(a.title)\n            )}\n            onChange={(tags) => {\n              setAllTags(tags);\n            }}\n            treeCheckable\n            placeholder=\"Please select\"\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Recipe Notes\" name=\"notes\">\n          <Tooltip\n            trigger={[\"focus\"]}\n            title=\"Delimit separate notes with ; \"\n            placement=\"top\"\n          >\n            <TextArea\n              value={allNotes.join(\";\")}\n              onChange={(e) => setAllNotes(e.target.value.split(\";\"))}\n              autoSize\n            />\n          </Tooltip>\n        </Form.Item>\n\n        <Form.Item wrapperCol={{ span: 24 }}>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            className={title.length && url.length ? \"btn-active\" : \"btn\"}\n            disabled={title.length && url.length ? false : true}\n            onClick={editEntry}\n            danger\n            block\n          >\n            Update Recipe\n          </Button>\n        </Form.Item>\n      </Form>\n    </Space>\n  );\n};\n\nexport default RecipeEdit;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/DogIcon.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCatalog.js",["53","54","55","56","57","58","59","60","61","62","63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":27,"nodeType":"71","messageId":"72","endLine":1,"endColumn":36},{"ruleId":"69","severity":1,"message":"73","line":13,"column":10,"nodeType":"71","messageId":"72","endLine":13,"endColumn":19},{"ruleId":"69","severity":1,"message":"74","line":13,"column":21,"nodeType":"71","messageId":"72","endLine":13,"endColumn":33},{"ruleId":"69","severity":1,"message":"75","line":14,"column":10,"nodeType":"71","messageId":"72","endLine":14,"endColumn":20},{"ruleId":"69","severity":1,"message":"76","line":14,"column":22,"nodeType":"71","messageId":"72","endLine":14,"endColumn":35},{"ruleId":"77","severity":1,"message":"78","line":33,"column":15,"nodeType":"79","endLine":39,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":55,"column":13,"nodeType":"79","endLine":61,"endColumn":15},{"ruleId":"77","severity":1,"message":"78","line":99,"column":9,"nodeType":"79","endLine":99,"endColumn":79},{"ruleId":"77","severity":1,"message":"78","line":101,"column":9,"nodeType":"79","endLine":101,"endColumn":60},{"ruleId":"80","severity":1,"message":"81","line":64,"column":6,"nodeType":"82","endLine":64,"endColumn":8,"suggestions":"83"},{"ruleId":"77","severity":1,"message":"78","line":118,"column":9,"nodeType":"79","endLine":118,"endColumn":79},{"ruleId":"77","severity":1,"message":"78","line":120,"column":9,"nodeType":"79","endLine":120,"endColumn":60},{"ruleId":"69","severity":1,"message":"84","line":44,"column":10,"nodeType":"71","messageId":"72","endLine":44,"endColumn":24},{"ruleId":"69","severity":1,"message":"85","line":46,"column":10,"nodeType":"71","messageId":"72","endLine":46,"endColumn":16},{"ruleId":"80","severity":1,"message":"86","line":73,"column":6,"nodeType":"82","endLine":73,"endColumn":14,"suggestions":"87"},{"ruleId":"69","severity":1,"message":"88","line":91,"column":11,"nodeType":"71","messageId":"72","endLine":91,"endColumn":19},{"ruleId":"69","severity":1,"message":"88","line":118,"column":11,"nodeType":"71","messageId":"72","endLine":118,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":184,"column":43,"nodeType":"91","messageId":"92","endLine":184,"endColumn":45},{"ruleId":"93","severity":1,"message":"94","line":238,"column":18,"nodeType":"95","messageId":"96","endLine":238,"endColumn":20},{"ruleId":"97","severity":1,"message":"98","line":560,"column":73,"nodeType":"99","messageId":"100","endLine":560,"endColumn":74},{"ruleId":"77","severity":1,"message":"78","line":576,"column":17,"nodeType":"79","endLine":582,"endColumn":19},{"ruleId":"97","severity":1,"message":"98","line":701,"column":39,"nodeType":"99","messageId":"100","endLine":701,"endColumn":40},{"ruleId":"97","severity":1,"message":"98","line":755,"column":30,"nodeType":"99","messageId":"100","endLine":755,"endColumn":31},{"ruleId":"77","severity":1,"message":"78","line":857,"column":21,"nodeType":"79","endLine":857,"endColumn":65},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'tagsToAdd' is assigned a value but never used.","'setTagsToAdd' is assigned a value but never used.","'notesToAdd' is assigned a value but never used.","'setNotesToAdd' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allNotes', 'allTags', 'author', 'description', 'form', 'hasMade', 'imgSrc', 'rating', 'title', and 'url'. Either include them or remove the dependency array.","ArrayExpression",["103"],"'crawlingStatus' is assigned a value but never used.","'taskID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.",["104"],"'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [allNotes, allTags, author, description, form, hasMade, imgSrc, rating, title, url]",{"range":"109","text":"110"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"111","text":"112"},[1488,1490],"[allNotes, allTags, author, description, form, hasMade, imgSrc, rating, title, url]",[1945,1953],"[apiStateReferences, sortBy]"]