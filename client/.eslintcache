[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js":"6","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js":"7"},{"size":484,"mtime":1609027700211,"results":"8","hashOfConfig":"9"},{"size":12524,"mtime":1649548348618,"results":"10","hashOfConfig":"9"},{"size":2594,"mtime":1649546798337,"results":"11","hashOfConfig":"9"},{"size":27929,"mtime":1649548454206,"results":"12","hashOfConfig":"9"},{"size":7271,"mtime":1649468024271,"results":"13","hashOfConfig":"9"},{"size":8404,"mtime":1649032457340,"results":"14","hashOfConfig":"9"},{"size":8086,"mtime":1649548491353,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1yhrrie",{"filePath":"19","messages":"20","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["32","33"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["34","35","36","37","38","39","40","41","42"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["43"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["44","45"],"import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Button } from \"@mui/material\";\nimport Icon from \"@mdi/react\";\nimport { mdiDog } from \"@mdi/js\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst titleCase = (str) => {\n  return str\n    .toLowerCase()\n    .split(\" \")\n    .map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(\" \");\n};\n\nconst RecipeEntry = ({\n  recipe,\n  unique_id,\n  url,\n  setRecipe,\n  setOpenOverlay,\n  setUrl,\n  handleCreate,\n  handleDelete,\n  quickTagOptions,\n  type,\n  setType,\n}) => {\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [tags, setTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(\"\");\n  const [hasMade, setHasMade] = useState(false);\n\n  const createEntry = () => {\n    let notes;\n\n    if (allNotes.length > 0) {\n      notes = [allNotes.trim()];\n    } else {\n      notes = [];\n    }\n\n    handleCreate({\n      unique_id: unique_id,\n      title: title,\n      url: url,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      notes: notes,\n      rating: 0,\n      tags: tags,\n    });\n    setRecipe({});\n    setOpenOverlay(false);\n    if (type === \"crawl\") {\n      handleDelete(recipe.unique_id, \"crawledrecipe\");\n    }\n    setUrl(\"\");\n    setType(\"\");\n  };\n\n  return (\n    <Box component=\"div\">\n      <Box\n        component=\"form\"\n        sx={{\n          \"& .MuiTextField-root\": {\n            display: \"flex\",\n            justifyContent: \"center\",\n          },\n        }}\n        autoComplete=\"off\"\n      >\n        <div style={{ textAlign: \"center\" }}>\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          ) : (\n            <img\n              src={\"./static/graphics/default_image.jpg\"}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          )}\n        </div>\n        {type === \"blank\" ? (\n          <div>\n            <TextField\n              label=\"Recipe URL\"\n              variant=\"filled\"\n              required\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              sx={{ m: 2 }}\n            />\n          </div>\n        ) : null}\n        <div>\n          <TextField\n            label=\"Recipe Image\"\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n            variant=\"filled\"\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <FormControlLabel\n            value=\"Has Made?\"\n            control={\n              <Checkbox value={hasMade} onClick={() => setHasMade(!hasMade)} />\n            }\n            label=\"Has Made?\"\n            labelPlacement=\"start\"\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Title\"\n            variant=\"filled\"\n            required\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Author\"\n            variant=\"filled\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Description\"\n            variant=\"filled\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <div>\n          <Autocomplete\n            sx={{ m: 2 }}\n            options={quickTagOptions.sort(\n              (a, b) => -b.firstLetter.localeCompare(a.firstLetter)\n            )}\n            onChange={(e, value) => {\n              let tags = [];\n              value.forEach((val) => tags.push(val.tag.trim()));\n              setTags(tags);\n            }}\n            multiple={true}\n            freeSolo\n            disableCloseOnSelect\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params);\n\n              const { inputValue } = params;\n              // Suggest the creation of a new value\n              const isExisting = options.some(\n                (option) => inputValue === option.tag\n              );\n              if (inputValue !== \"\" && !isExisting) {\n                filtered.push({\n                  inputValue,\n                  tag: inputValue,\n                });\n              }\n              return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            groupBy={(option) => option.firstLetter}\n            getOptionLabel={(option) => {\n              if (typeof option === \"string\") {\n                return option;\n              }\n              if (option.inputValue) {\n                return option.inputValue;\n              }\n              return option.tag;\n            }}\n            renderOption={(props, option, { selected }) => (\n              <li {...props}>\n                <Checkbox\n                  icon={icon}\n                  checkedIcon={checkedIcon}\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.tag}\n              </li>\n            )}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Add Tags\" variant=\"filled\" />\n            )}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Add Notes\"\n            variant=\"filled\"\n            value={allNotes}\n            onChange={(e) => setAllNotes(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"error\"\n          disabled={title.length && url.length ? false : true}\n          onClick={createEntry}\n          endIcon={\n            <Icon\n              path={mdiDog}\n              title=\"Dog\"\n              size={1}\n              horizontal\n              vertical\n              rotate={180}\n              color={title.length ? \"white\" : \"darkgray\"}\n            />\n          }\n          sx={{\n            margin: \"0 8px 8px 0px\",\n            width: \"100%\",\n          }}\n        >\n          Create Entry\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecipeEntry;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js",["46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":25,"column":10,"nodeType":"54","messageId":"55","endLine":25,"endColumn":24},{"ruleId":"52","severity":1,"message":"56","line":27,"column":10,"nodeType":"54","messageId":"55","endLine":27,"endColumn":16},{"ruleId":"57","severity":1,"message":"58","line":73,"column":6,"nodeType":"59","endLine":73,"endColumn":14,"suggestions":"60"},{"ruleId":"52","severity":1,"message":"61","line":120,"column":11,"nodeType":"54","messageId":"55","endLine":120,"endColumn":19},{"ruleId":"52","severity":1,"message":"61","line":147,"column":11,"nodeType":"54","messageId":"55","endLine":147,"endColumn":19},{"ruleId":"62","severity":1,"message":"63","line":213,"column":43,"nodeType":"64","messageId":"65","endLine":213,"endColumn":45},{"ruleId":"57","severity":1,"message":"66","line":243,"column":6,"nodeType":"59","endLine":243,"endColumn":13,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":268,"column":18,"nodeType":"70","messageId":"71","endLine":268,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":407,"column":21,"nodeType":"74","endLine":407,"endColumn":65},{"ruleId":"72","severity":1,"message":"73","line":320,"column":21,"nodeType":"74","endLine":326,"endColumn":23},{"ruleId":"72","severity":1,"message":"73","line":92,"column":13,"nodeType":"74","endLine":95,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":97,"column":13,"nodeType":"74","endLine":100,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":90,"column":13,"nodeType":"74","endLine":93,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":95,"column":13,"nodeType":"74","endLine":98,"endColumn":15},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'crawlingStatus' is assigned a value but never used.","Identifier","unusedVar","'taskID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'allRecipes'. Either include it or remove the dependency array.",["78"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"83","text":"84"},"Update the dependencies array to be: [allRecipes, query]",{"range":"85","text":"86"},[2440,2448],"[apiStateReferences, sortBy]",[7186,7193],"[allRecipes, query]"]