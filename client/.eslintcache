[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js":"6","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js":"7"},{"size":484,"mtime":1609027700211,"results":"8","hashOfConfig":"9"},{"size":12524,"mtime":1649548348618,"results":"10","hashOfConfig":"9"},{"size":2594,"mtime":1649546798337,"results":"11","hashOfConfig":"9"},{"size":27929,"mtime":1649548454206,"results":"12","hashOfConfig":"9"},{"size":7271,"mtime":1649468024271,"results":"13","hashOfConfig":"9"},{"size":8404,"mtime":1649032457340,"results":"14","hashOfConfig":"9"},{"size":8086,"mtime":1649548491353,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1yhrrie",{"filePath":"19","messages":"20","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["35","36"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["37","38","39","40","41","42","43","44","45"],"import React, { useState, useEffect } from \"react\";\nimport RecipeCard from \"./Components/RecipeCard\";\nimport RecipeEntry from \"./Components/RecipeEntry\";\nimport Nav from \"./Components/Nav\";\nimport \"./App.css\";\nimport * as api from \"./utils/api\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Grid from \"@mui/material/Grid\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport { Button } from \"@mui/material\";\nimport Modal from \"@mui/material/Modal\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport DeleteRoundedIcon from \"@mui/icons-material/DeleteRounded\";\nimport useScrollTrigger from \"@mui/material/useScrollTrigger\";\nimport Fab from \"@mui/material/Fab\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\nimport Zoom from \"@mui/material/Zoom\";\n\nfunction App(props) {\n  const [url, setUrl] = useState(\"\");\n  const [crawlingStatus, setCrawlingStatus] = useState(null);\n  const [allRecipes, setAllRecipes] = useState(null);\n  const [taskID, setTaskID] = useState(null);\n  const [uniqueID, setUniqueID] = useState(null);\n  const [filteredRecipes, setFilteredRecipes] = useState([]);\n  const [searchOptions, setSearchOptions] = useState({});\n  const [sortBy, setSortBy] = useState(\"-timestamp\");\n  const [query, setQuery] = useState(\"\");\n  const [openOverlay, setOpenOverlay] = useState(false);\n  const [crawledRecipe, setCrawledRecipe] = useState({});\n  const [hadError, setHadError] = useState(false);\n  const [recipeEntryType, setRecipeEntryType] = useState(\"\");\n\n  function ScrollTop(props) {\n    const { children } = props;\n    const trigger = useScrollTrigger();\n\n    const handleScroll = (event) => {\n      const anchor = (event.target.ownerDocument || document).querySelector(\n        \"#back-to-top-anchor\"\n      );\n\n      if (anchor) {\n        anchor.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"center\",\n        });\n      }\n    };\n\n    return (\n      <Zoom in={trigger}>\n        <Box\n          onClick={handleScroll}\n          role=\"presentation\"\n          id=\"scroll-btn\"\n          sx={{ position: \"fixed\", bottom: 16, right: 16 }}\n        >\n          {children}\n        </Box>\n      </Zoom>\n    );\n  }\n\n  let statusInterval = 1;\n\n  useEffect(() => {\n    apiStateReferences();\n  }, [sortBy]);\n\n  async function handleCreate(recipe) {\n    api.createRecipe(recipe, apiStateReferences);\n    // document.getElementById(\"scroll-btn\").click();\n  }\n\n  async function handleDelete(unique_id, route) {\n    api.deleteRecipe(unique_id, route, apiStateReferences);\n  }\n\n  async function handleUpdate(field, unique_id, value, setState) {\n    switch (field) {\n      case \"has_made\":\n        api.updateHasMade(unique_id, value, setState);\n        break;\n      case \"rating\":\n        api.updateRating(unique_id, value, setState);\n        break;\n      case \"notes_add\":\n        api.addNotes(unique_id, value, setState);\n        break;\n      case \"notes_remove\":\n        api.removeNotes(unique_id, value, setState);\n        break;\n      case \"tags_add\":\n        api.addTags(unique_id, value, setState);\n        break;\n      case \"tags_remove\":\n        api.removeTags(unique_id, value, setState);\n        break;\n      case \"edit_entry\":\n        api.editEntry(unique_id, value, setState);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async function apiStateReferences() {\n    api.getAll(setAllRecipes, setFilteredRecipes, sortBy);\n  }\n\n  async function startCrawl() {\n    if (!url) {\n      return false;\n    }\n    const response = await fetch(\"crawl/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ method: \"POST\", url: url }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setTaskID(data.task_id);\n        setUniqueID(data.unique_id);\n        setCrawlingStatus(data.status);\n        statusInterval = setInterval(\n          () => checkCrawlStatus(data.task_id, data.unique_id),\n          2000\n        );\n      })\n      .catch((error) => console.error(\"Error:\", error));\n  }\n\n  async function checkCrawlStatus(task_id, unique_id) {\n    const data = JSON.stringify({\n      method: \"GET\",\n      task_id: task_id,\n      unique_id: unique_id,\n    });\n    // Making a request to server to ask status of crawling job\n    const response = await fetch(\n      \"crawl/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: data,\n      },\n      data\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.data) {\n          clearInterval(statusInterval);\n          setCrawlingStatus(\"finished\");\n          setCrawledRecipe(data.data);\n        } else if (data.error) {\n          console.log(data.error);\n          clearInterval(statusInterval);\n          setCrawlingStatus(\"finished\");\n          setHadError(true);\n          let newID = uuidv4();\n          setCrawledRecipe({\n            unique_id: newID,\n            url: url,\n            title: \"\",\n            author: \"\",\n            description: \"\",\n            has_made: false,\n            img_src: \"\",\n            notes: [],\n            rating: 0,\n            tags: [],\n            timestamp: Date.now(),\n          });\n        } else if (data.status) {\n          setCrawlingStatus(data.status);\n        }\n      });\n  }\n\n  useEffect(() => {\n    if (allRecipes !== null) {\n      let arr = {\n        tags: [],\n        allOptions: [],\n      };\n      allRecipes.forEach((recipe) => {\n        let tags = recipe.tags;\n        let cleanedTitle = recipe.title.trim();\n        tags.forEach((tag) => {\n          if (tag.length) {\n            let cleanedTag = tag.toLowerCase().trim();\n            if (!arr.tags.includes(cleanedTag)) {\n              arr.tags.push(cleanedTag);\n            }\n            if (!arr.allOptions.includes(cleanedTag)) {\n              arr.allOptions.push(cleanedTag);\n            }\n          }\n        });\n        if (!arr.allOptions.includes(cleanedTitle)) {\n          arr.allOptions.push(cleanedTitle);\n        }\n      });\n      let options = arr.tags.map((option) => {\n        if (option.length) {\n          const firstLetter = option[0].toUpperCase();\n          option = option.split(\" \").map(function (word) {\n            return word.replace(word[0], word[0].toUpperCase());\n          });\n          return {\n            firstLetter: /[0-9]/.test(firstLetter) ? \"0-9\" : firstLetter,\n            tag: option[0],\n          };\n        }\n      });\n      arr.tags = options;\n      arr.allOptions.sort();\n      setSearchOptions(arr);\n    }\n  }, [allRecipes]);\n\n  useEffect(() => {\n    if (allRecipes !== null) {\n      const searchAllRegex = query && new RegExp(`${query}`, \"gi\");\n      const result = allRecipes.filter(\n        (recipe) =>\n          !searchAllRegex ||\n          searchAllRegex.test(recipe.title) +\n            searchAllRegex.test(recipe.author) +\n            searchAllRegex.test(recipe.tags)\n      );\n      setFilteredRecipes(result);\n    }\n  }, [query]);\n\n  const connect = (e, type) => {\n    e.preventDefault();\n    if (type === \"crawl\") {\n      startCrawl();\n    } else {\n      setCrawledRecipe({\n        unique_id: uuidv4(),\n        url: url,\n        title: \"\",\n        author: \"\",\n        description: \"\",\n        has_made: false,\n        img_src: \"\",\n        notes: [],\n        rating: 0,\n        tags: [],\n        timestamp: Date.now(),\n      });\n    }\n    setOpenOverlay(true);\n  };\n\n  const disconnect = (type) => {\n    if (hadError == true) {\n      setHadError(false);\n    } else if (type === \"crawl\") {\n      handleDelete(uniqueID, \"crawledrecipe\");\n    }\n    setCrawledRecipe({});\n    setRecipeEntryType(\"\");\n    setOpenOverlay(false);\n  };\n\n  return (\n    <div id=\"client_page\">\n      <Box sx={{ display: \"flex\" }}>\n        <CssBaseline />\n        <Nav\n          sortBy={sortBy}\n          setSortBy={setSortBy}\n          query={query}\n          setQuery={setQuery}\n          searchOptions={searchOptions}\n          recipeEntryType={recipeEntryType}\n          setRecipeEntryType={setRecipeEntryType}\n          connect={connect}\n          url={url}\n          setUrl={setUrl}\n          allRecipes={allRecipes}\n        />\n        <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n          <Toolbar id=\"back-to-top-anchor\" />\n          <Grid\n            container\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            {filteredRecipes.length ? (\n              filteredRecipes.map((recipe) => (\n                <Grid item xs=\"auto\" key={uuidv4()}>\n                  <RecipeCard\n                    recipeInfo={recipe}\n                    quickTagOptions={searchOptions.tags}\n                    deleteRecipe={handleDelete}\n                    updateRecipe={handleUpdate}\n                    key={uuidv4()}\n                  />\n                </Grid>\n              ))\n            ) : (\n              <Grid item xs=\"auto\">\n                <CircularProgress color=\"error\" />\n              </Grid>\n            )}\n          </Grid>\n        </Box>\n        <ScrollTop {...props}>\n          <Fab color=\"error\" size=\"small\" aria-label=\"scroll back to top\">\n            <KeyboardArrowUpIcon />\n          </Fab>\n        </ScrollTop>\n      </Box>\n      <Modal\n        open={openOverlay}\n        onClose={(_, reason) => {\n          if (reason !== \"backdropClick\") {\n            setOpenOverlay(false);\n          }\n        }}\n        closeAfterTransition\n        disableEscapeKeyDown\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          overflow: \"scroll\",\n        }}\n      >\n        {(url || recipeEntryType === \"blank\") && openOverlay ? (\n          <Box\n            sx={{\n              width: \"50%\",\n              background: \"white\",\n              borderRadius: \"4px\",\n              border: \"1px solid #f04a26\",\n              boxShadow: 24,\n              p: 4,\n              zIndex: 10,\n              position: \"relative\",\n            }}\n            id=\"recipeEntry-modal\"\n          >\n            {Object.keys(crawledRecipe).length ? (\n              <Box component=\"div\">\n                <div>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    sx={{ position: \"absolute\", top: 10, right: 10 }}\n                    onClick={() => [disconnect(recipeEntryType), setUrl(\"\")]}\n                  >\n                    <DeleteRoundedIcon />\n                  </Button>\n                </div>\n                {hadError ? (\n                  <Typography variant=\"body1\" component=\"p\" mb={1}>\n                    <em>\n                      {\" \"}\n                      The Recipe could not be scraped. Please input the recipe\n                      information manually:\n                    </em>\n                  </Typography>\n                ) : (\n                  <Typography variant=\"body1\" component=\"p\" mb={1}>\n                    <em>Example Recipe Entry:</em>\n                  </Typography>\n                )}\n                <RecipeEntry\n                  recipe={crawledRecipe}\n                  key={crawledRecipe.unique_id}\n                  unique_id={crawledRecipe.unique_id}\n                  url={url}\n                  setRecipe={setCrawledRecipe}\n                  setOpenOverlay={setOpenOverlay}\n                  handleCreate={handleCreate}\n                  handleDelete={handleDelete}\n                  setUrl={setUrl}\n                  hadError={hadError}\n                  quickTagOptions={searchOptions.tags}\n                  type={recipeEntryType}\n                  setType={setRecipeEntryType}\n                />\n              </Box>\n            ) : (\n              <>\n                <div className=\"dog-loader\">\n                  <div className=\"dog-head\">\n                    <img src=\"./static/graphics/dog-head.png\" />\n                  </div>\n                  <div className=\"dog-body\"></div>\n                </div>\n                <p className=\"dog-loader-p\">\n                  <em>Fetching deliciousness...</em>\n                </p>\n              </>\n            )}\n          </Box>\n        ) : null}\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["46"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Typography from \"@mui/material/Typography\";\nimport { Button, CardActionArea, CardActions } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport Rating from \"@mui/material/Rating\";\nimport Chip from \"@mui/material/Chip\";\nimport Stack from \"@mui/material/Stack\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport Link from \"@mui/material/Link\";\nimport Modal from \"@mui/material/Modal\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport Slide from \"@mui/material/Slide\";\nimport Grid from \"@mui/material/Grid\";\nimport Tab from \"@mui/material/Tab\";\nimport TabContext from \"@mui/lab/TabContext\";\nimport TabList from \"@mui/lab/TabList\";\nimport TabPanel from \"@mui/lab/TabPanel\";\nimport Divider from \"@mui/material/Divider\";\nimport Fab from \"@mui/material/Fab\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Popover from \"@mui/material/Popover\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport DeleteRoundedIcon from \"@mui/icons-material/DeleteRounded\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport RecipeEdit from \"./RecipeEdit\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst RecipeCard = ({\n  recipeInfo,\n  quickTagOptions,\n  deleteRecipe,\n  updateRecipe,\n}) => {\n  const [recipe, setRecipe] = useState(recipeInfo);\n  const [popoverType, setPopoverType] = useState(\"\");\n  const [tagsToAdd, setTagsToAdd] = useState(\"\");\n  const [notesToAdd, setNotesToAdd] = useState(\"\");\n  const [newRating, setNewRating] = useState(recipe.rating);\n  const [open, setOpen] = useState(false);\n  const [tabValue, setTabValue] = useState(\"1\");\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [deleteAnchorEl, setDeleteAnchorEl] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    setRecipe(recipeInfo);\n    setNewRating(recipeInfo.rating);\n  }, [recipeInfo]);\n\n  const add = (e, field) => {\n    e.preventDefault();\n\n    switch (field) {\n      case \"tags\":\n        if (tagsToAdd.length) {\n          let newTags = tagsToAdd.join(\",\").toLowerCase();\n          updateRecipe(\"tags_add\", recipe.unique_id, newTags, setRecipe);\n        }\n        handleClosePopover();\n        setTagsToAdd(\"\");\n        break;\n      case \"notes\":\n        if (notesToAdd.length) {\n          let newNotes = notesToAdd.trim();\n          updateRecipe(\"notes_add\", recipe.unique_id, newNotes, setRecipe);\n          handleClosePopover();\n          setNotesToAdd(\"\");\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const remove = (e, field) => {\n    e.preventDefault();\n    let itemToRemove = e.target.closest(\"div\").firstChild.textContent;\n\n    switch (field) {\n      case \"tags\":\n        updateRecipe(\n          \"tags_remove\",\n          recipe.unique_id,\n          itemToRemove.trim(),\n          setRecipe\n        );\n        break;\n      case \"notes\":\n        updateRecipe(\n          \"notes_remove\",\n          recipe.unique_id,\n          itemToRemove.trim(),\n          setRecipe\n        );\n        break;\n      default:\n        break;\n    }\n  };\n\n  const ratingChanged = (e, rating) => {\n    if (rating !== null) {\n      setNewRating(rating);\n      updateRecipe(\"rating\", recipe.unique_id, rating, setRecipe);\n    }\n  };\n\n  const handleHasMade = () => {\n    updateRecipe(\"has_made\", recipe.unique_id, recipe.has_made, setRecipe);\n  };\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => [setOpen(false), setIsEditing(false)];\n  const handleTabChange = (e, newValue) => {\n    if (newValue === \"1\" || newValue === \"2\") {\n      setTabValue(newValue);\n    } else {\n      window.open(newValue, \"_blank\");\n    }\n  };\n  const handleClickPopover = (e, type) => {\n    setPopoverType(type);\n    setAnchorEl(e.currentTarget);\n  };\n  const handleClickDeletePopover = (e) => {\n    setDeleteAnchorEl(e.currentTarget);\n  };\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n    setPopoverType(\"\");\n  };\n  const handleCloseDeletePopover = () => {\n    setDeleteAnchorEl(null);\n  };\n  const popoverOpen = Boolean(anchorEl);\n  const deletePopoverOpen = Boolean(deleteAnchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <>\n      <Card sx={{ width: 345, position: \"relative\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"error\"\n          sx={{\n            position: \"absolute\",\n            top: 0,\n            right: 0,\n            width: \"fit-content!important\",\n            minWidth: 0,\n            p: \"6px\",\n            zIndex: 10,\n            bgcolor: \"rgba(169,169,169, 0.5)\",\n          }}\n          onClick={(e) => handleClickDeletePopover(e)}\n        >\n          {\" \"}\n          <DeleteRoundedIcon\n            sx={{\n              color: \"rgba(255,255,255, 0.7)\",\n            }}\n          />\n        </Button>\n        <Popover\n          id={id}\n          open={deletePopoverOpen}\n          anchorEl={deleteAnchorEl}\n          onClose={handleCloseDeletePopover}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"left\",\n          }}\n          transformOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\",\n          }}\n        >\n          <Box\n            component=\"div\"\n            sx={{\n              \"& .MuiTextField-root\": {\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n              },\n            }}\n            onSubmit={(e) => add(e, \"notes\")}\n            noValidate\n            autoComplete=\"off\"\n          >\n            <div style={{ width: 300, padding: 10, textAlign: \"center\" }}>\n              <Typography gutterBottom variant=\"body1\" component=\"p\" mb={1}>\n                <strong>Are you sure you want to delete this recipe???</strong>\n              </Typography>\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                endIcon={<DeleteRoundedIcon />}\n                onClick={() => [\n                  deleteRecipe(recipe.unique_id, \"recipes\"),\n                  handleCloseDeletePopover,\n                ]}\n              >\n                {\" Delete Recipe \"}\n              </Button>\n            </div>\n          </Box>{\" \"}\n        </Popover>\n        <CardActionArea onClick={handleOpen}>\n          <CardMedia\n            component=\"img\"\n            height=\"140\"\n            image={\n              recipe.img_src\n                ? recipe.img_src\n                : \"./static/graphics/default_image.jpg\"\n            }\n          />\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"body1\"\n              component=\"p\"\n              mb={0}\n              sx={{\n                height: \"50px\",\n                lineClamp: 2,\n                textOverflow: \"ellipsis\",\n                overflow: \"hidden\",\n              }}\n            >\n              <strong>{recipe.title}</strong>\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Saved On: {moment(recipe.timestamp).format(\"MMMM Do YYYY\")}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Box\n            sx={{\n              width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <Rating name=\"rating\" value={newRating} onChange={ratingChanged} />\n            <Stack direction=\"row\" spacing={1}>\n              <Chip\n                label=\"Cooked\"\n                variant={recipe.has_made ? null : \"outlined\"}\n                onClick={handleHasMade}\n                color=\"error\"\n              />\n            </Stack>\n          </Box>\n        </CardActions>\n        <CardActions sx={{ padding: \"8px 0 0 0\" }}>\n          <Box\n            sx={{\n              width: \"100%\",\n            }}\n          >\n            <Link\n              href={recipe.url}\n              underline=\"none\"\n              color=\"inherit\"\n              target=\"_blank\"\n            >\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                endIcon={<SendIcon />}\n                sx={{\n                  width: \"100%\",\n                }}\n              >\n                {\"Go to Recipe\"}\n              </Button>\n            </Link>\n          </Box>\n        </CardActions>\n      </Card>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          overflow: \"scroll\",\n          paddingBottom: 20,\n          paddingTop: 80,\n        }}\n      >\n        <Slide direction=\"up\" in={open} mountOnEnter unmountOnExit>\n          {!isEditing ? (\n            <div className=\"blog-slider\">\n              <div className=\"blog-slider__wrp swiper-wrapper\">\n                <div className=\"blog-slider__item swiper-slide\">\n                  <div className=\"blog-slider__img\">\n                    <img\n                      src={\n                        recipe.img_src\n                          ? recipe.img_src\n                          : \"./static/graphics/default_image.jpg\"\n                      }\n                    />\n                  </div>\n                  <div className=\"blog-slider__content\">\n                    <Grid container>\n                      <Grid item xs={12}>\n                        <TabContext value={tabValue} sx={{ color: \"error\" }}>\n                          <TabList\n                            value={tabValue}\n                            onChange={handleTabChange}\n                            indicatorColor=\"primary\"\n                            aria-label=\"secondary tabs example\"\n                          >\n                            <Tab value=\"1\" label=\"Info\" />\n                            <Tab value=\"2\" label=\"Tags/Notes\" />\n                            <Tab value={recipe.url} label=\"Website\" />\n                          </TabList>\n                          <TabPanel value=\"1\">\n                            <Typography variant=\"body1\" component=\"p\" mb={1}>\n                              <strong>{recipe.title}</strong>\n                            </Typography>\n                            <Typography variant=\"body1\" component=\"p\" mb={1}>\n                              <strong>Author:</strong>{\" \"}\n                              <em>\n                                {recipe.author.length\n                                  ? recipe.author\n                                  : \"No Assigned Author\"}\n                              </em>\n                            </Typography>\n                            <Stack\n                              direction=\"row\"\n                              spacing={1}\n                              style={{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                              }}\n                              mb={2}\n                            >\n                              <Chip\n                                label=\"Cooked\"\n                                variant={recipe.has_made ? null : \"outlined\"}\n                                onClick={handleHasMade}\n                                color=\"error\"\n                              />\n                              <Rating\n                                name=\"rating\"\n                                value={newRating}\n                                onChange={ratingChanged}\n                              />\n                            </Stack>\n                            <Typography variant=\"body1\" component=\"p\">\n                              {recipe.description\n                                ? recipe.description\n                                : \"There is no description for this \"}\n                            </Typography>\n                          </TabPanel>\n                          <TabPanel value=\"2\">\n                            <Typography\n                              variant=\"body1\"\n                              component=\"p\"\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\",\n                                alignItems: \"center\",\n                              }}\n                            >\n                              <strong>\n                                <em>Tagged As:</em>\n                              </strong>\n                              <Fab\n                                aria-describedby={id}\n                                size=\"small\"\n                                color=\"error\"\n                                aria-label=\"add\"\n                                style={{\n                                  width: \"30px\",\n                                  height: \"30px\",\n                                  minHeight: \"30px\",\n                                }}\n                                onClick={(e) => handleClickPopover(e, \"tags\")}\n                              >\n                                <AddIcon />\n                              </Fab>\n                            </Typography>\n                            <Divider\n                              variant=\"left\"\n                              style={{ marginTop: \"5px\", marginBottom: \"10px\" }}\n                            />\n                            <Stack\n                              direction=\"row\"\n                              spacing={1}\n                              style={{ display: \"flex\", flexWrap: \"wrap\" }}\n                            >\n                              {recipe.tags.length > 0 ? (\n                                recipe.tags.map((tag, i) => (\n                                  <Chip\n                                    key={uuidv4()}\n                                    label={tag}\n                                    variant=\"outlined\"\n                                    color=\"error\"\n                                    onDelete={(e) => remove(e, \"tags\")}\n                                    style={{ margin: \"8px 0 0 8px\" }}\n                                  />\n                                ))\n                              ) : (\n                                <Typography variant=\"body2\" component=\"p\">\n                                  <em>This recipe has not been tagged yet</em>\n                                </Typography>\n                              )}\n                            </Stack>\n                            <Typography\n                              variant=\"body1\"\n                              component=\"p\"\n                              mt={2}\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\",\n                                alignItems: \"center\",\n                              }}\n                            >\n                              <strong>\n                                <em>Notes: </em>\n                              </strong>\n                              <Fab\n                                aria-describedby={id}\n                                size=\"small\"\n                                color=\"error\"\n                                aria-label=\"add\"\n                                style={{\n                                  width: \"30px\",\n                                  height: \"30px\",\n                                  minHeight: \"30px\",\n                                }}\n                                onClick={(e) => handleClickPopover(e, \"notes\")}\n                              >\n                                <AddIcon />\n                              </Fab>\n                            </Typography>\n                            <Divider\n                              variant=\"left\"\n                              style={{ marginTop: \"5px\", marginBottom: \"10px\" }}\n                            />\n                            <Stack direction=\"column\" spacing={1}>\n                              {recipe.notes.length > 0 ? (\n                                recipe.notes.map((note, i) => (\n                                  <Chip\n                                    key={uuidv4()}\n                                    label={note}\n                                    variant=\"outlined\"\n                                    color=\"error\"\n                                    onDelete={(e) => remove(e, \"notes\")}\n                                    style={{\n                                      color: \"#000\",\n                                      display: \"flex\",\n                                      justifyContent: \"space-between\",\n                                      height: \"fit-content\",\n                                      padding: \"4px 0\",\n                                      maxWidth: \"100%\",\n                                    }}\n                                  />\n                                ))\n                              ) : (\n                                <Typography variant=\"body2\" component=\"p\">\n                                  <em>This recipe has no notes yet</em>\n                                </Typography>\n                              )}\n                            </Stack>\n                            <Popover\n                              id={id}\n                              open={popoverOpen}\n                              anchorEl={anchorEl}\n                              onClose={handleClosePopover}\n                              anchorOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"left\",\n                              }}\n                              transformOrigin={{\n                                vertical: \"center\",\n                                horizontal: \"right\",\n                              }}\n                            >\n                              {popoverType === \"notes\" ? (\n                                <Box\n                                  component=\"form\"\n                                  className=\"recipe-card-text-input\"\n                                  sx={{\n                                    \"& .MuiTextField-root\": {\n                                      display: \"flex\",\n                                      justifyContent: \"flex-end\",\n                                    },\n                                  }}\n                                  onSubmit={(e) => add(e, \"notes\")}\n                                  noValidate\n                                  autoComplete=\"off\"\n                                >\n                                  <div\n                                    className=\"recipe-card-text-input\"\n                                    style={{ width: 400, padding: 8 }}\n                                  >\n                                    <TextField\n                                      label=\"Notes\"\n                                      placeholder=\"Add new notes here...\"\n                                      variant=\"outlined\"\n                                      multiline\n                                      rows={4}\n                                      onChange={(e) =>\n                                        setNotesToAdd(e.target.value.trim())\n                                      }\n                                    />\n                                    <Button\n                                      type=\"submit\"\n                                      variant=\"contained\"\n                                      color=\"error\"\n                                      endIcon={<SaveIcon />}\n                                      sx={{\n                                        margin: \"0 8px 8px 0px\",\n                                        width: \"100%\",\n                                      }}\n                                    >\n                                      {\"Save\"}\n                                    </Button>\n                                  </div>\n                                </Box>\n                              ) : (\n                                <Box\n                                  component=\"form\"\n                                  sx={{\n                                    \"& .MuiTextField-root\": {\n                                      display: \"flex\",\n                                      justifyContent: \"flex-end\",\n                                    },\n                                  }}\n                                  onSubmit={(e) => add(e, \"tags\")}\n                                  noValidate\n                                  autoComplete=\"off\"\n                                >\n                                  <div\n                                    className=\"recipe-card-text-input\"\n                                    style={{ width: 300, padding: 8 }}\n                                  >\n                                    <Autocomplete\n                                      sx={{ margin: 0 }}\n                                      options={quickTagOptions.sort(\n                                        (a, b) =>\n                                          -b.firstLetter.localeCompare(\n                                            a.firstLetter\n                                          )\n                                      )}\n                                      onChange={(e, value) => {\n                                        let tags = [];\n                                        value.forEach((val) =>\n                                          tags.push(val.tag.trim())\n                                        );\n                                        setTagsToAdd(tags);\n                                      }}\n                                      multiple={true}\n                                      freeSolo\n                                      disableCloseOnSelect\n                                      filterOptions={(options, params) => {\n                                        const filtered = filter(\n                                          options,\n                                          params\n                                        );\n\n                                        const { inputValue } = params;\n                                        // Suggest the creation of a new value\n                                        const isExisting = options.some(\n                                          (option) => inputValue === option.tag\n                                        );\n                                        if (inputValue !== \"\" && !isExisting) {\n                                          filtered.push({\n                                            inputValue,\n                                            tag: inputValue,\n                                          });\n                                        }\n                                        return filtered;\n                                      }}\n                                      selectOnFocus\n                                      clearOnBlur\n                                      handleHomeEndKeys\n                                      groupBy={(option) => option.firstLetter}\n                                      getOptionLabel={(option) => {\n                                        if (typeof option === \"string\") {\n                                          return option;\n                                        }\n                                        if (option.inputValue) {\n                                          return option.inputValue;\n                                        }\n                                        return option.tag;\n                                      }}\n                                      renderOption={(\n                                        props,\n                                        option,\n                                        { selected }\n                                      ) => (\n                                        <li {...props}>\n                                          <Checkbox\n                                            icon={icon}\n                                            checkedIcon={checkedIcon}\n                                            style={{ marginRight: 8 }}\n                                            checked={selected}\n                                          />\n                                          {option.tag}\n                                        </li>\n                                      )}\n                                      renderInput={(params) => (\n                                        <TextField\n                                          {...params}\n                                          label=\"Tags\"\n                                          placeholder=\"Add tags here\"\n                                        />\n                                      )}\n                                    />\n                                    <Button\n                                      type=\"submit\"\n                                      variant=\"contained\"\n                                      color=\"error\"\n                                      endIcon={<SaveIcon />}\n                                      sx={{\n                                        margin: \"0 8px 8px 0px\",\n                                        width: \"100%\",\n                                      }}\n                                    >\n                                      {\"Save\"}\n                                    </Button>\n                                  </div>\n                                </Box>\n                              )}\n                            </Popover>\n                          </TabPanel>\n                        </TabContext>\n                      </Grid>\n                    </Grid>\n                    <Box\n                      onClick={() => setIsEditing(true)}\n                      role=\"presentation\"\n                      sx={{ position: \"absolute\", top: 16, right: 16 }}\n                    >\n                      <Fab color=\"error\" size=\"small\">\n                        <EditIcon />\n                      </Fab>\n                    </Box>\n                  </div>\n                </div>\n              </div>\n              <div className=\"blog-slider__pagination\"></div>\n            </div>\n          ) : (\n            <Box\n              sx={{\n                width: \"50%\",\n                background: \"white\",\n                borderRadius: \"4px\",\n                border: \"1px solid #f04a26\",\n                boxShadow: 24,\n                p: 4,\n                zIndex: 10,\n                position: \"relative\",\n              }}\n              id=\"recipeEdit-modal\"\n              key={uuidv4()}\n            >\n              <Typography variant=\"body1\" component=\"p\" mb={1}>\n                <em>Edit Recipe Details Below:</em>\n              </Typography>\n              <RecipeEdit\n                recipe={recipe}\n                setRecipe={setRecipe}\n                quickTagOptions={quickTagOptions}\n                setIsEditing={setIsEditing}\n                updateRecipe={updateRecipe}\n              />\n            </Box>\n          )}\n        </Slide>\n      </Modal>\n    </>\n  );\n};\nexport default RecipeCard;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["47","48"],"import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Button } from \"@mui/material\";\nimport Icon from \"@mdi/react\";\nimport { mdiDog } from \"@mdi/js\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst titleCase = (str) => {\n  return str\n    .toLowerCase()\n    .split(\" \")\n    .map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(\" \");\n};\n\nconst RecipeEntry = ({\n  recipe,\n  unique_id,\n  url,\n  setRecipe,\n  setOpenOverlay,\n  setUrl,\n  handleCreate,\n  handleDelete,\n  quickTagOptions,\n  type,\n  setType,\n}) => {\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [tags, setTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(\"\");\n  const [hasMade, setHasMade] = useState(false);\n\n  const createEntry = () => {\n    let notes;\n\n    if (allNotes.length > 0) {\n      notes = [allNotes.trim()];\n    } else {\n      notes = [];\n    }\n\n    handleCreate({\n      unique_id: unique_id,\n      title: title,\n      url: url,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      notes: notes,\n      rating: 0,\n      tags: tags,\n    });\n    setRecipe({});\n    setOpenOverlay(false);\n    if (type === \"crawl\") {\n      handleDelete(recipe.unique_id, \"crawledrecipe\");\n    }\n    setUrl(\"\");\n    setType(\"\");\n  };\n\n  return (\n    <Box component=\"div\">\n      <Box\n        component=\"form\"\n        sx={{\n          \"& .MuiTextField-root\": {\n            display: \"flex\",\n            justifyContent: \"center\",\n          },\n        }}\n        autoComplete=\"off\"\n      >\n        <div style={{ textAlign: \"center\" }}>\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          ) : (\n            <img\n              src={\"./static/graphics/default_image.jpg\"}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          )}\n        </div>\n        {type === \"blank\" ? (\n          <div>\n            <TextField\n              label=\"Recipe URL\"\n              variant=\"filled\"\n              required\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              sx={{ m: 2 }}\n            />\n          </div>\n        ) : null}\n        <div>\n          <TextField\n            label=\"Recipe Image\"\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n            variant=\"filled\"\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <FormControlLabel\n            value=\"Has Made?\"\n            control={\n              <Checkbox value={hasMade} onClick={() => setHasMade(!hasMade)} />\n            }\n            label=\"Has Made?\"\n            labelPlacement=\"start\"\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Title\"\n            variant=\"filled\"\n            required\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Author\"\n            variant=\"filled\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Description\"\n            variant=\"filled\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <div>\n          <Autocomplete\n            sx={{ m: 2 }}\n            options={quickTagOptions.sort(\n              (a, b) => -b.firstLetter.localeCompare(a.firstLetter)\n            )}\n            onChange={(e, value) => {\n              let tags = [];\n              value.forEach((val) => tags.push(val.tag.trim()));\n              setTags(tags);\n            }}\n            multiple={true}\n            freeSolo\n            disableCloseOnSelect\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params);\n\n              const { inputValue } = params;\n              // Suggest the creation of a new value\n              const isExisting = options.some(\n                (option) => inputValue === option.tag\n              );\n              if (inputValue !== \"\" && !isExisting) {\n                filtered.push({\n                  inputValue,\n                  tag: inputValue,\n                });\n              }\n              return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            groupBy={(option) => option.firstLetter}\n            getOptionLabel={(option) => {\n              if (typeof option === \"string\") {\n                return option;\n              }\n              if (option.inputValue) {\n                return option.inputValue;\n              }\n              return option.tag;\n            }}\n            renderOption={(props, option, { selected }) => (\n              <li {...props}>\n                <Checkbox\n                  icon={icon}\n                  checkedIcon={checkedIcon}\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.tag}\n              </li>\n            )}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Add Tags\" variant=\"filled\" />\n            )}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Add Notes\"\n            variant=\"filled\"\n            value={allNotes}\n            onChange={(e) => setAllNotes(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"error\"\n          disabled={title.length && url.length ? false : true}\n          onClick={createEntry}\n          endIcon={\n            <Icon\n              path={mdiDog}\n              title=\"Dog\"\n              size={1}\n              horizontal\n              vertical\n              rotate={180}\n              color={title.length ? \"white\" : \"darkgray\"}\n            />\n          }\n          sx={{\n            margin: \"0 8px 8px 0px\",\n            width: \"100%\",\n          }}\n        >\n          Create Entry\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecipeEntry;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js",["49","50"],"import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Rating from \"@mui/material/Rating\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Button } from \"@mui/material\";\nimport Icon from \"@mdi/react\";\nimport { mdiDog } from \"@mdi/js\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst titleCase = (str) => {\n  return str\n    .toLowerCase()\n    .split(\" \")\n    .map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(\" \");\n};\n\nconst RecipeEdit = ({\n  recipe,\n  setRecipe,\n  quickTagOptions,\n  setIsEditing,\n  updateRecipe,\n}) => {\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [allTags, setAllTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(recipe.notes);\n  const [hasMade, setHasMade] = useState(recipe.has_made);\n  const [rating, setRating] = useState(recipe.rating);\n\n  const handleNotes = (note, index) => {\n    const updatedNotes = [...allNotes];\n    updatedNotes[index] = note;\n    setAllNotes(updatedNotes);\n  };\n\n  const editEntry = () => {\n    let notes = [...allNotes];\n\n    if (notes.length > 0) {\n      notes = notes.map((note) => {\n        return note.trim();\n      });\n    } else {\n      notes = [];\n    }\n\n    const updatedRecipe = {\n      title: title,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      rating: rating,\n      notes: notes,\n      tags: allTags,\n    };\n\n    updateRecipe(\"edit_entry\", recipe.unique_id, updatedRecipe, setRecipe);\n    setIsEditing(false);\n  };\n\n  return (\n    <Box component=\"div\">\n      <Box\n        component=\"form\"\n        sx={{\n          \"& .MuiTextField-root\": {\n            display: \"flex\",\n            justifyContent: \"center\",\n          },\n        }}\n        autoComplete=\"off\"\n      >\n        <div style={{ textAlign: \"center\" }}>\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          ) : (\n            <img\n              src={\"./static/graphics/default_image.jpg\"}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          )}\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Image\"\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n            variant=\"filled\"\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div style={{ marginLeft: \"4px\" }}>\n          <FormControlLabel\n            value=\"Has Made?\"\n            control={\n              <Checkbox\n                value={hasMade}\n                checked={hasMade}\n                onClick={() => setHasMade(!hasMade)}\n              />\n            }\n            label=\"Has Made?\"\n            labelPlacement=\"start\"\n          />\n        </div>\n        <div>\n          <Rating\n            name=\"rating\"\n            value={rating}\n            onChange={(e, rating) => {\n              setRating(rating);\n            }}\n            sx={{ ml: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Title\"\n            variant=\"filled\"\n            required\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Author\"\n            variant=\"filled\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Description\"\n            variant=\"filled\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <div>\n          <Autocomplete\n            value={allTags}\n            sx={{ m: 2 }}\n            options={quickTagOptions.sort(\n              (a, b) => -b.firstLetter.localeCompare(a.firstLetter)\n            )}\n            onChange={(e, value) => {\n              let tags = [];\n              value.forEach((val) => {\n                if (typeof val === \"string\") {\n                  tags.push(val.trim());\n                } else {\n                  tags.push(val.tag.trim());\n                }\n              });\n              setAllTags(tags);\n            }}\n            multiple={true}\n            freeSolo\n            disableCloseOnSelect\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params);\n\n              const { inputValue } = params;\n              // Suggest the creation of a new value\n              const isExisting = options.some(\n                (option) => inputValue === option.tag\n              );\n              if (inputValue !== \"\" && !isExisting) {\n                filtered.push({\n                  inputValue,\n                  tag: inputValue,\n                });\n              }\n              return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            groupBy={(option) => option.firstLetter}\n            getOptionLabel={(option) => {\n              if (typeof option === \"string\") {\n                return option;\n              }\n              if (option.inputValue) {\n                return option.inputValue;\n              }\n              return option.tag;\n            }}\n            renderOption={(props, option, { selected }) => (\n              <li {...props}>\n                <Checkbox\n                  icon={icon}\n                  checkedIcon={checkedIcon}\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.tag}\n              </li>\n            )}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Edit Tags\" variant=\"filled\" />\n            )}\n          />\n        </div>\n        <div>\n          {allNotes.length > 1 ? (\n            allNotes.map((note, index) => (\n              <TextField\n                label=\"Edit Note\"\n                variant=\"filled\"\n                value={note}\n                onChange={(e) => handleNotes(e.target.value, index)}\n                sx={{ m: 2 }}\n                multiline\n                maxRows={4}\n              />\n            ))\n          ) : (\n            <TextField\n              label=\"Add Note\"\n              variant=\"filled\"\n              value={allNotes}\n              onChange={(e) => setAllNotes([e.target.value])}\n              sx={{ m: 2 }}\n              multiline\n              maxRows={4}\n            />\n          )}\n        </div>\n        <Button\n          type=\"button\"\n          variant=\"contained\"\n          color=\"error\"\n          disabled={title.length && recipe.url.length ? false : true}\n          onClick={editEntry}\n          endIcon={\n            <Icon\n              path={mdiDog}\n              title=\"Dog\"\n              size={1}\n              horizontal\n              vertical\n              rotate={180}\n              color={title.length ? \"white\" : \"darkgray\"}\n            />\n          }\n          sx={{\n            margin: \"0 8px 8px 0px\",\n            width: \"100%\",\n          }}\n        >\n          Save\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecipeEdit;\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":25,"column":10,"nodeType":"57","messageId":"58","endLine":25,"endColumn":24},{"ruleId":"55","severity":1,"message":"59","line":27,"column":10,"nodeType":"57","messageId":"58","endLine":27,"endColumn":16},{"ruleId":"60","severity":1,"message":"61","line":73,"column":6,"nodeType":"62","endLine":73,"endColumn":14,"suggestions":"63"},{"ruleId":"55","severity":1,"message":"64","line":120,"column":11,"nodeType":"57","messageId":"58","endLine":120,"endColumn":19},{"ruleId":"55","severity":1,"message":"64","line":147,"column":11,"nodeType":"57","messageId":"58","endLine":147,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":213,"column":43,"nodeType":"67","messageId":"68","endLine":213,"endColumn":45},{"ruleId":"60","severity":1,"message":"69","line":243,"column":6,"nodeType":"62","endLine":243,"endColumn":13,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":268,"column":18,"nodeType":"73","messageId":"74","endLine":268,"endColumn":20},{"ruleId":"75","severity":1,"message":"76","line":407,"column":21,"nodeType":"77","endLine":407,"endColumn":65},{"ruleId":"75","severity":1,"message":"76","line":320,"column":21,"nodeType":"77","endLine":326,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":92,"column":13,"nodeType":"77","endLine":95,"endColumn":15},{"ruleId":"75","severity":1,"message":"76","line":97,"column":13,"nodeType":"77","endLine":100,"endColumn":15},{"ruleId":"75","severity":1,"message":"76","line":90,"column":13,"nodeType":"77","endLine":93,"endColumn":15},{"ruleId":"75","severity":1,"message":"76","line":95,"column":13,"nodeType":"77","endLine":98,"endColumn":15},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'crawlingStatus' is assigned a value but never used.","Identifier","unusedVar","'taskID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'allRecipes'. Either include it or remove the dependency array.",["81"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"86","text":"87"},"Update the dependencies array to be: [allRecipes, query]",{"range":"88","text":"89"},[2440,2448],"[apiStateReferences, sortBy]",[7186,7193],"[allRecipes, query]"]