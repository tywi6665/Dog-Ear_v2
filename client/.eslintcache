[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js":"6","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js":"7"},{"size":484,"mtime":1609027700211,"results":"8","hashOfConfig":"9"},{"size":12524,"mtime":1649548348618,"results":"10","hashOfConfig":"9"},{"size":2594,"mtime":1649552049733,"results":"11","hashOfConfig":"9"},{"size":28025,"mtime":1649632413647,"results":"12","hashOfConfig":"9"},{"size":7271,"mtime":1649468024271,"results":"13","hashOfConfig":"9"},{"size":8404,"mtime":1649032457340,"results":"14","hashOfConfig":"9"},{"size":8086,"mtime":1649548491353,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1yhrrie",{"filePath":"19","messages":"20","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["34","35"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["36","37","38","39","40","41","42","43","44"],"import React, { useState, useEffect } from \"react\";\nimport RecipeCard from \"./Components/RecipeCard\";\nimport RecipeEntry from \"./Components/RecipeEntry\";\nimport Nav from \"./Components/Nav\";\nimport \"./App.css\";\nimport * as api from \"./utils/api\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Grid from \"@mui/material/Grid\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport { Button } from \"@mui/material\";\nimport Modal from \"@mui/material/Modal\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport DeleteRoundedIcon from \"@mui/icons-material/DeleteRounded\";\nimport useScrollTrigger from \"@mui/material/useScrollTrigger\";\nimport Fab from \"@mui/material/Fab\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\nimport Zoom from \"@mui/material/Zoom\";\n\nfunction App(props) {\n  const [url, setUrl] = useState(\"\");\n  const [crawlingStatus, setCrawlingStatus] = useState(null);\n  const [allRecipes, setAllRecipes] = useState(null);\n  const [taskID, setTaskID] = useState(null);\n  const [uniqueID, setUniqueID] = useState(null);\n  const [filteredRecipes, setFilteredRecipes] = useState([]);\n  const [searchOptions, setSearchOptions] = useState({});\n  const [sortBy, setSortBy] = useState(\"-timestamp\");\n  const [query, setQuery] = useState(\"\");\n  const [openOverlay, setOpenOverlay] = useState(false);\n  const [crawledRecipe, setCrawledRecipe] = useState({});\n  const [hadError, setHadError] = useState(false);\n  const [recipeEntryType, setRecipeEntryType] = useState(\"\");\n\n  function ScrollTop(props) {\n    const { children } = props;\n    const trigger = useScrollTrigger();\n\n    const handleScroll = (event) => {\n      const anchor = (event.target.ownerDocument || document).querySelector(\n        \"#back-to-top-anchor\"\n      );\n\n      if (anchor) {\n        anchor.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"center\",\n        });\n      }\n    };\n\n    return (\n      <Zoom in={trigger}>\n        <Box\n          onClick={handleScroll}\n          role=\"presentation\"\n          id=\"scroll-btn\"\n          sx={{ position: \"fixed\", bottom: 16, right: 16 }}\n        >\n          {children}\n        </Box>\n      </Zoom>\n    );\n  }\n\n  let statusInterval = 1;\n\n  useEffect(() => {\n    apiStateReferences();\n  }, [sortBy]);\n\n  async function handleCreate(recipe) {\n    api.createRecipe(recipe, apiStateReferences);\n    // document.getElementById(\"scroll-btn\").click();\n  }\n\n  async function handleDelete(unique_id, route) {\n    api.deleteRecipe(unique_id, route, apiStateReferences);\n  }\n\n  async function handleUpdate(field, unique_id, value, setState) {\n    switch (field) {\n      case \"has_made\":\n        api.updateHasMade(unique_id, value, setState);\n        break;\n      case \"rating\":\n        api.updateRating(unique_id, value, setState);\n        break;\n      case \"notes_add\":\n        api.addNotes(unique_id, value, setState);\n        break;\n      case \"notes_remove\":\n        api.removeNotes(unique_id, value, setState);\n        break;\n      case \"tags_add\":\n        api.addTags(unique_id, value, setState);\n        break;\n      case \"tags_remove\":\n        api.removeTags(unique_id, value, setState);\n        break;\n      case \"edit_entry\":\n        api.editEntry(unique_id, value, setState);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async function apiStateReferences() {\n    api.getAll(setAllRecipes, setFilteredRecipes, sortBy);\n  }\n\n  async function startCrawl() {\n    if (!url) {\n      return false;\n    }\n    const response = await fetch(\"crawl/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ method: \"POST\", url: url }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setTaskID(data.task_id);\n        setUniqueID(data.unique_id);\n        setCrawlingStatus(data.status);\n        statusInterval = setInterval(\n          () => checkCrawlStatus(data.task_id, data.unique_id),\n          2000\n        );\n      })\n      .catch((error) => console.error(\"Error:\", error));\n  }\n\n  async function checkCrawlStatus(task_id, unique_id) {\n    const data = JSON.stringify({\n      method: \"GET\",\n      task_id: task_id,\n      unique_id: unique_id,\n    });\n    // Making a request to server to ask status of crawling job\n    const response = await fetch(\n      \"crawl/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: data,\n      },\n      data\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.data) {\n          clearInterval(statusInterval);\n          setCrawlingStatus(\"finished\");\n          setCrawledRecipe(data.data);\n        } else if (data.error) {\n          console.log(data.error);\n          clearInterval(statusInterval);\n          setCrawlingStatus(\"finished\");\n          setHadError(true);\n          let newID = uuidv4();\n          setCrawledRecipe({\n            unique_id: newID,\n            url: url,\n            title: \"\",\n            author: \"\",\n            description: \"\",\n            has_made: false,\n            img_src: \"\",\n            notes: [],\n            rating: 0,\n            tags: [],\n            timestamp: Date.now(),\n          });\n        } else if (data.status) {\n          setCrawlingStatus(data.status);\n        }\n      });\n  }\n\n  useEffect(() => {\n    if (allRecipes !== null) {\n      let arr = {\n        tags: [],\n        allOptions: [],\n      };\n      allRecipes.forEach((recipe) => {\n        let tags = recipe.tags;\n        let cleanedTitle = recipe.title.trim();\n        tags.forEach((tag) => {\n          if (tag.length) {\n            let cleanedTag = tag.toLowerCase().trim();\n            if (!arr.tags.includes(cleanedTag)) {\n              arr.tags.push(cleanedTag);\n            }\n            if (!arr.allOptions.includes(cleanedTag)) {\n              arr.allOptions.push(cleanedTag);\n            }\n          }\n        });\n        if (!arr.allOptions.includes(cleanedTitle)) {\n          arr.allOptions.push(cleanedTitle);\n        }\n      });\n      let options = arr.tags.map((option) => {\n        if (option.length) {\n          const firstLetter = option[0].toUpperCase();\n          option = option.split(\" \").map(function (word) {\n            return word.replace(word[0], word[0].toUpperCase());\n          });\n          return {\n            firstLetter: /[0-9]/.test(firstLetter) ? \"0-9\" : firstLetter,\n            tag: option[0],\n          };\n        }\n      });\n      arr.tags = options;\n      arr.allOptions.sort();\n      setSearchOptions(arr);\n    }\n  }, [allRecipes]);\n\n  useEffect(() => {\n    if (allRecipes !== null) {\n      const searchAllRegex = query && new RegExp(`${query}`, \"gi\");\n      const result = allRecipes.filter(\n        (recipe) =>\n          !searchAllRegex ||\n          searchAllRegex.test(recipe.title) +\n            searchAllRegex.test(recipe.author) +\n            searchAllRegex.test(recipe.tags)\n      );\n      setFilteredRecipes(result);\n    }\n  }, [query]);\n\n  const connect = (e, type) => {\n    e.preventDefault();\n    if (type === \"crawl\") {\n      startCrawl();\n    } else {\n      setCrawledRecipe({\n        unique_id: uuidv4(),\n        url: url,\n        title: \"\",\n        author: \"\",\n        description: \"\",\n        has_made: false,\n        img_src: \"\",\n        notes: [],\n        rating: 0,\n        tags: [],\n        timestamp: Date.now(),\n      });\n    }\n    setOpenOverlay(true);\n  };\n\n  const disconnect = (type) => {\n    if (hadError == true) {\n      setHadError(false);\n    } else if (type === \"crawl\") {\n      handleDelete(uniqueID, \"crawledrecipe\");\n    }\n    setCrawledRecipe({});\n    setRecipeEntryType(\"\");\n    setOpenOverlay(false);\n  };\n\n  return (\n    <div id=\"client_page\">\n      <Box sx={{ display: \"flex\" }}>\n        <CssBaseline />\n        <Nav\n          sortBy={sortBy}\n          setSortBy={setSortBy}\n          query={query}\n          setQuery={setQuery}\n          searchOptions={searchOptions}\n          recipeEntryType={recipeEntryType}\n          setRecipeEntryType={setRecipeEntryType}\n          connect={connect}\n          url={url}\n          setUrl={setUrl}\n          allRecipes={allRecipes}\n        />\n        <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n          <Toolbar id=\"back-to-top-anchor\" />\n          <Grid\n            container\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            {filteredRecipes.length ? (\n              filteredRecipes.map((recipe) => (\n                <Grid item xs=\"auto\" key={uuidv4()}>\n                  <RecipeCard\n                    recipeInfo={recipe}\n                    quickTagOptions={searchOptions.tags}\n                    deleteRecipe={handleDelete}\n                    updateRecipe={handleUpdate}\n                    key={uuidv4()}\n                  />\n                </Grid>\n              ))\n            ) : (\n              <Grid item xs=\"auto\">\n                <CircularProgress color=\"error\" />\n              </Grid>\n            )}\n          </Grid>\n        </Box>\n        <ScrollTop {...props}>\n          <Fab color=\"error\" size=\"small\" aria-label=\"scroll back to top\">\n            <KeyboardArrowUpIcon />\n          </Fab>\n        </ScrollTop>\n      </Box>\n      <Modal\n        open={openOverlay}\n        onClose={(_, reason) => {\n          if (reason !== \"backdropClick\") {\n            setOpenOverlay(false);\n          }\n        }}\n        closeAfterTransition\n        disableEscapeKeyDown\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          overflow: \"scroll\",\n        }}\n      >\n        {(url || recipeEntryType === \"blank\") && openOverlay ? (\n          <Box\n            sx={{\n              width: \"50%\",\n              background: \"white\",\n              borderRadius: \"4px\",\n              border: \"1px solid #f04a26\",\n              boxShadow: 24,\n              p: 4,\n              zIndex: 10,\n              position: \"relative\",\n            }}\n            id=\"recipeEntry-modal\"\n          >\n            {Object.keys(crawledRecipe).length ? (\n              <Box component=\"div\">\n                <div>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    sx={{ position: \"absolute\", top: 10, right: 10 }}\n                    onClick={() => [disconnect(recipeEntryType), setUrl(\"\")]}\n                  >\n                    <DeleteRoundedIcon />\n                  </Button>\n                </div>\n                {hadError ? (\n                  <Typography variant=\"body1\" component=\"p\" mb={1}>\n                    <em>\n                      {\" \"}\n                      The Recipe could not be scraped. Please input the recipe\n                      information manually:\n                    </em>\n                  </Typography>\n                ) : (\n                  <Typography variant=\"body1\" component=\"p\" mb={1}>\n                    <em>Example Recipe Entry:</em>\n                  </Typography>\n                )}\n                <RecipeEntry\n                  recipe={crawledRecipe}\n                  key={crawledRecipe.unique_id}\n                  unique_id={crawledRecipe.unique_id}\n                  url={url}\n                  setRecipe={setCrawledRecipe}\n                  setOpenOverlay={setOpenOverlay}\n                  handleCreate={handleCreate}\n                  handleDelete={handleDelete}\n                  setUrl={setUrl}\n                  hadError={hadError}\n                  quickTagOptions={searchOptions.tags}\n                  type={recipeEntryType}\n                  setType={setRecipeEntryType}\n                />\n              </Box>\n            ) : (\n              <>\n                <div className=\"dog-loader\">\n                  <div className=\"dog-head\">\n                    <img src=\"./static/graphics/dog-head.png\" />\n                  </div>\n                  <div className=\"dog-body\"></div>\n                </div>\n                <p className=\"dog-loader-p\">\n                  <em>Fetching deliciousness...</em>\n                </p>\n              </>\n            )}\n          </Box>\n        ) : null}\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["45"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["46","47"],"import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Button } from \"@mui/material\";\nimport Icon from \"@mdi/react\";\nimport { mdiDog } from \"@mdi/js\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst titleCase = (str) => {\n  return str\n    .toLowerCase()\n    .split(\" \")\n    .map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(\" \");\n};\n\nconst RecipeEntry = ({\n  recipe,\n  unique_id,\n  url,\n  setRecipe,\n  setOpenOverlay,\n  setUrl,\n  handleCreate,\n  handleDelete,\n  quickTagOptions,\n  type,\n  setType,\n}) => {\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [tags, setTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(\"\");\n  const [hasMade, setHasMade] = useState(false);\n\n  const createEntry = () => {\n    let notes;\n\n    if (allNotes.length > 0) {\n      notes = [allNotes.trim()];\n    } else {\n      notes = [];\n    }\n\n    handleCreate({\n      unique_id: unique_id,\n      title: title,\n      url: url,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      notes: notes,\n      rating: 0,\n      tags: tags,\n    });\n    setRecipe({});\n    setOpenOverlay(false);\n    if (type === \"crawl\") {\n      handleDelete(recipe.unique_id, \"crawledrecipe\");\n    }\n    setUrl(\"\");\n    setType(\"\");\n  };\n\n  return (\n    <Box component=\"div\">\n      <Box\n        component=\"form\"\n        sx={{\n          \"& .MuiTextField-root\": {\n            display: \"flex\",\n            justifyContent: \"center\",\n          },\n        }}\n        autoComplete=\"off\"\n      >\n        <div style={{ textAlign: \"center\" }}>\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          ) : (\n            <img\n              src={\"./static/graphics/default_image.jpg\"}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          )}\n        </div>\n        {type === \"blank\" ? (\n          <div>\n            <TextField\n              label=\"Recipe URL\"\n              variant=\"filled\"\n              required\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              sx={{ m: 2 }}\n            />\n          </div>\n        ) : null}\n        <div>\n          <TextField\n            label=\"Recipe Image\"\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n            variant=\"filled\"\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <FormControlLabel\n            value=\"Has Made?\"\n            control={\n              <Checkbox value={hasMade} onClick={() => setHasMade(!hasMade)} />\n            }\n            label=\"Has Made?\"\n            labelPlacement=\"start\"\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Title\"\n            variant=\"filled\"\n            required\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Author\"\n            variant=\"filled\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Description\"\n            variant=\"filled\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <div>\n          <Autocomplete\n            sx={{ m: 2 }}\n            options={quickTagOptions.sort(\n              (a, b) => -b.firstLetter.localeCompare(a.firstLetter)\n            )}\n            onChange={(e, value) => {\n              let tags = [];\n              value.forEach((val) => tags.push(val.tag.trim()));\n              setTags(tags);\n            }}\n            multiple={true}\n            freeSolo\n            disableCloseOnSelect\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params);\n\n              const { inputValue } = params;\n              // Suggest the creation of a new value\n              const isExisting = options.some(\n                (option) => inputValue === option.tag\n              );\n              if (inputValue !== \"\" && !isExisting) {\n                filtered.push({\n                  inputValue,\n                  tag: inputValue,\n                });\n              }\n              return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            groupBy={(option) => option.firstLetter}\n            getOptionLabel={(option) => {\n              if (typeof option === \"string\") {\n                return option;\n              }\n              if (option.inputValue) {\n                return option.inputValue;\n              }\n              return option.tag;\n            }}\n            renderOption={(props, option, { selected }) => (\n              <li {...props}>\n                <Checkbox\n                  icon={icon}\n                  checkedIcon={checkedIcon}\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.tag}\n              </li>\n            )}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Add Tags\" variant=\"filled\" />\n            )}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Add Notes\"\n            variant=\"filled\"\n            value={allNotes}\n            onChange={(e) => setAllNotes(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"error\"\n          disabled={title.length && url.length ? false : true}\n          onClick={createEntry}\n          endIcon={\n            <Icon\n              path={mdiDog}\n              title=\"Dog\"\n              size={1}\n              horizontal\n              vertical\n              rotate={180}\n              color={title.length ? \"white\" : \"darkgray\"}\n            />\n          }\n          sx={{\n            margin: \"0 8px 8px 0px\",\n            width: \"100%\",\n          }}\n        >\n          Create Entry\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecipeEntry;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Nav.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEdit.js",["48","49"],"import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Rating from \"@mui/material/Rating\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Button } from \"@mui/material\";\nimport Icon from \"@mdi/react\";\nimport { mdiDog } from \"@mdi/js\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst titleCase = (str) => {\n  return str\n    .toLowerCase()\n    .split(\" \")\n    .map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(\" \");\n};\n\nconst RecipeEdit = ({\n  recipe,\n  setRecipe,\n  quickTagOptions,\n  setIsEditing,\n  updateRecipe,\n}) => {\n  const [title, setTitle] = useState(titleCase(recipe.title));\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [allTags, setAllTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(recipe.notes);\n  const [hasMade, setHasMade] = useState(recipe.has_made);\n  const [rating, setRating] = useState(recipe.rating);\n\n  const handleNotes = (note, index) => {\n    const updatedNotes = [...allNotes];\n    updatedNotes[index] = note;\n    setAllNotes(updatedNotes);\n  };\n\n  const editEntry = () => {\n    let notes = [...allNotes];\n\n    if (notes.length > 0) {\n      notes = notes.map((note) => {\n        return note.trim();\n      });\n    } else {\n      notes = [];\n    }\n\n    const updatedRecipe = {\n      title: title,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      rating: rating,\n      notes: notes,\n      tags: allTags,\n    };\n\n    updateRecipe(\"edit_entry\", recipe.unique_id, updatedRecipe, setRecipe);\n    setIsEditing(false);\n  };\n\n  return (\n    <Box component=\"div\">\n      <Box\n        component=\"form\"\n        sx={{\n          \"& .MuiTextField-root\": {\n            display: \"flex\",\n            justifyContent: \"center\",\n          },\n        }}\n        autoComplete=\"off\"\n      >\n        <div style={{ textAlign: \"center\" }}>\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          ) : (\n            <img\n              src={\"./static/graphics/default_image.jpg\"}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          )}\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Image\"\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n            variant=\"filled\"\n            value={imgSrc}\n            onChange={(e) => setImgSrc(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div style={{ marginLeft: \"4px\" }}>\n          <FormControlLabel\n            value=\"Has Made?\"\n            control={\n              <Checkbox\n                value={hasMade}\n                checked={hasMade}\n                onClick={() => setHasMade(!hasMade)}\n              />\n            }\n            label=\"Has Made?\"\n            labelPlacement=\"start\"\n          />\n        </div>\n        <div>\n          <Rating\n            name=\"rating\"\n            value={rating}\n            onChange={(e, rating) => {\n              setRating(rating);\n            }}\n            sx={{ ml: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Title\"\n            variant=\"filled\"\n            required\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Author\"\n            variant=\"filled\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Recipe Description\"\n            variant=\"filled\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <div>\n          <Autocomplete\n            value={allTags}\n            sx={{ m: 2 }}\n            options={quickTagOptions.sort(\n              (a, b) => -b.firstLetter.localeCompare(a.firstLetter)\n            )}\n            onChange={(e, value) => {\n              let tags = [];\n              value.forEach((val) => {\n                if (typeof val === \"string\") {\n                  tags.push(val.trim());\n                } else {\n                  tags.push(val.tag.trim());\n                }\n              });\n              setAllTags(tags);\n            }}\n            multiple={true}\n            freeSolo\n            disableCloseOnSelect\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params);\n\n              const { inputValue } = params;\n              // Suggest the creation of a new value\n              const isExisting = options.some(\n                (option) => inputValue === option.tag\n              );\n              if (inputValue !== \"\" && !isExisting) {\n                filtered.push({\n                  inputValue,\n                  tag: inputValue,\n                });\n              }\n              return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            groupBy={(option) => option.firstLetter}\n            getOptionLabel={(option) => {\n              if (typeof option === \"string\") {\n                return option;\n              }\n              if (option.inputValue) {\n                return option.inputValue;\n              }\n              return option.tag;\n            }}\n            renderOption={(props, option, { selected }) => (\n              <li {...props}>\n                <Checkbox\n                  icon={icon}\n                  checkedIcon={checkedIcon}\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.tag}\n              </li>\n            )}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Edit Tags\" variant=\"filled\" />\n            )}\n          />\n        </div>\n        <div>\n          {allNotes.length > 1 ? (\n            allNotes.map((note, index) => (\n              <TextField\n                label=\"Edit Note\"\n                variant=\"filled\"\n                value={note}\n                onChange={(e) => handleNotes(e.target.value, index)}\n                sx={{ m: 2 }}\n                multiline\n                maxRows={4}\n              />\n            ))\n          ) : (\n            <TextField\n              label=\"Add Note\"\n              variant=\"filled\"\n              value={allNotes}\n              onChange={(e) => setAllNotes([e.target.value])}\n              sx={{ m: 2 }}\n              multiline\n              maxRows={4}\n            />\n          )}\n        </div>\n        <Button\n          type=\"button\"\n          variant=\"contained\"\n          color=\"error\"\n          disabled={title.length && recipe.url.length ? false : true}\n          onClick={editEntry}\n          endIcon={\n            <Icon\n              path={mdiDog}\n              title=\"Dog\"\n              size={1}\n              horizontal\n              vertical\n              rotate={180}\n              color={title.length ? \"white\" : \"darkgray\"}\n            />\n          }\n          sx={{\n            margin: \"0 8px 8px 0px\",\n            width: \"100%\",\n          }}\n        >\n          Save\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecipeEdit;\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":25,"column":10,"nodeType":"56","messageId":"57","endLine":25,"endColumn":24},{"ruleId":"54","severity":1,"message":"58","line":27,"column":10,"nodeType":"56","messageId":"57","endLine":27,"endColumn":16},{"ruleId":"59","severity":1,"message":"60","line":73,"column":6,"nodeType":"61","endLine":73,"endColumn":14,"suggestions":"62"},{"ruleId":"54","severity":1,"message":"63","line":120,"column":11,"nodeType":"56","messageId":"57","endLine":120,"endColumn":19},{"ruleId":"54","severity":1,"message":"63","line":147,"column":11,"nodeType":"56","messageId":"57","endLine":147,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":213,"column":43,"nodeType":"66","messageId":"67","endLine":213,"endColumn":45},{"ruleId":"59","severity":1,"message":"68","line":243,"column":6,"nodeType":"61","endLine":243,"endColumn":13,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":268,"column":18,"nodeType":"72","messageId":"73","endLine":268,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":407,"column":21,"nodeType":"76","endLine":407,"endColumn":65},{"ruleId":"74","severity":1,"message":"75","line":320,"column":21,"nodeType":"76","endLine":326,"endColumn":23},{"ruleId":"74","severity":1,"message":"75","line":92,"column":13,"nodeType":"76","endLine":95,"endColumn":15},{"ruleId":"74","severity":1,"message":"75","line":97,"column":13,"nodeType":"76","endLine":100,"endColumn":15},{"ruleId":"74","severity":1,"message":"75","line":90,"column":13,"nodeType":"76","endLine":93,"endColumn":15},{"ruleId":"74","severity":1,"message":"75","line":95,"column":13,"nodeType":"76","endLine":98,"endColumn":15},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'crawlingStatus' is assigned a value but never used.","Identifier","unusedVar","'taskID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.","ArrayExpression",["79"],"'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'allRecipes'. Either include it or remove the dependency array.",["80"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"85","text":"86"},"Update the dependencies array to be: [allRecipes, query]",{"range":"87","text":"88"},[2440,2448],"[apiStateReferences, sortBy]",[7186,7193],"[allRecipes, query]"]