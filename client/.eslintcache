[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Editable.js":"6"},{"size":484,"mtime":1609027700211,"results":"7","hashOfConfig":"8"},{"size":8246,"mtime":1610421417736,"results":"9","hashOfConfig":"8"},{"size":1687,"mtime":1610506628031,"results":"10","hashOfConfig":"8"},{"size":11788,"mtime":1610324351638,"results":"11","hashOfConfig":"8"},{"size":4959,"mtime":1609986244136,"results":"12","hashOfConfig":"8"},{"size":1627,"mtime":1609816721699,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1yhrrie",{"filePath":"17","messages":"18","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["30","31"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["32","33","34","35","36","37","38","39","40"],"import React, { useState, useEffect } from \"react\";\nimport RecipeCard from \"./Components/RecipeCard\";\nimport RecipeEntry from \"./Components/RecipeEntry\";\nimport \"./App.scss\";\n// import axios from \"axios\";\nimport * as api from \"./utils/api\";\n\nfunction App() {\n  const [url, setUrl] = useState(\n    \"https://www.justonecookbook.com/basque-burnt-cheesecake/\"\n  );\n  const [crawlingStatus, setCrawlingStatus] = useState(null);\n  const [allRecipes, setAllRecipes] = useState(null);\n  const [taskID, setTaskID] = useState(null);\n  const [uniqueID, setUniqueID] = useState(null);\n  const [filteredRecipes, setFilteredRecipes] = useState([]);\n  const [tagsList, setTagsList] = useState([]);\n  const [sortBy, setSortBy] = useState(\"-timestamp\");\n  const [query, setQuery] = useState(\"\");\n  const [isOverlay, setIsOverlay] = useState(false);\n  const [recipe, setRecipe] = useState({});\n\n  let statusInterval = 1;\n\n  useEffect(() => {\n    apiStateReferences();\n  }, [sortBy]);\n\n  async function handleDelete(unique_id) {\n    api.deleteRecipe(unique_id, apiStateReferences);\n  }\n\n  async function handleUpdate(field, unique_id, value) {\n    console.log(field);\n    switch (field) {\n      case \"has_made\":\n        api.updateHasMade(unique_id, value, apiStateReferences);\n        break;\n      case \"rating\":\n        api.updateRating(unique_id, value, apiStateReferences);\n        break;\n      case \"notes_add\":\n        api.addNotes(unique_id, value, apiStateReferences);\n        break;\n      case \"notes_remove\":\n        api.removeNotes(unique_id, value, apiStateReferences);\n        break;\n      case \"tags_add\":\n        api.addTags(unique_id, value, apiStateReferences);\n        break;\n      case \"tags_remove\":\n        api.removeTags(unique_id, value, apiStateReferences);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async function apiStateReferences() {\n    api.getAll(setAllRecipes, setFilteredRecipes, sortBy);\n  }\n\n  async function startCrawl() {\n    if (!url) {\n      return false;\n    }\n    const response = await fetch(\"crawl/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ method: \"POST\", url: url }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Success:\", data);\n        setTaskID(data.task_id);\n        setUniqueID(data.unique_id);\n        setCrawlingStatus(data.status);\n        statusInterval = setInterval(\n          () => checkCrawlStatus(data.task_id, data.unique_id),\n          2000\n        );\n      })\n      // .then(statusInterval = setInterval(checkCrawlStatus, 2000))\n      .catch((error) => console.error(\"Error:\", error));\n  }\n\n  async function checkCrawlStatus(task_id, unique_id) {\n    console.log(\"Checking Crawl Status\");\n    console.log(task_id, unique_id);\n    const data = JSON.stringify({\n      method: \"GET\",\n      task_id: task_id,\n      unique_id: unique_id,\n    });\n    // Making a request to server to ask status of crawling job\n    const response = await fetch(\n      \"crawl/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: data,\n      },\n      data\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        if (data.data) {\n          clearInterval(statusInterval);\n          apiStateReferences();\n        } else if (data.error) {\n          clearInterval(statusInterval);\n          console.log(data.error);\n        } else if (data.status) {\n          setCrawlingStatus(data.status);\n        }\n      });\n  }\n\n  return (\n    <div id=\"client_page\">\n      <button onClick={() => startCrawl()}>Click Me!</button>\n      <div\n        className=\"overlay\"\n        style={\n          isOverlay && url.length ? { display: \"block\" } : { display: \"none\" }\n        }\n      >\n        {\n          // loadClient &&\n          url && isOverlay ? (\n            <div className=\"entry_popup\">\n              {Object.keys(recipe).length ? (\n                <>\n                  <header className=\"popup-header\">\n                    <div className=\"back\">\n                      <button\n                      // onClick={() => disconnect()}\n                      ></button>\n                    </div>\n                    <h3>\n                      <em>Example Recipe Entry:</em>\n                    </h3>\n                  </header>\n                  <RecipeEntry\n                    recipe={recipe}\n                    key={recipe.id}\n                    url={url}\n                    setRecipe={setRecipe}\n                    setIsOverlay={setIsOverlay}\n                    setUrl={setUrl}\n                  />\n                </>\n              ) : (\n                <>\n                  <div className=\"dog-loader\">\n                    <div className=\"dog-head\">\n                      <img src=\"http://www.clker.com/cliparts/j/3/Z/Y/D/5/dog-head-md.png\" />\n                    </div>\n                    <div className=\"dog-body\"></div>\n                  </div>\n                  <p className=\"dog-loader-p\">\n                    <em>Scraping data...</em>\n                  </p>\n                </>\n              )}\n            </div>\n          ) : (\n            <></>\n          )\n        }\n      </div>\n      <header className=\"page-header\">\n        <div className=\"titles\">\n          <h1>Dog-Ear</h1>\n          <h2>Recipe Repository</h2>\n        </div>\n        <div className=\"dog-image\">\n          <img src=\"./graphics/dog.png\" alt=\"Woof woof\" />\n        </div>\n      </header>\n      <div className=\"interaction-wrapper\">\n        <div className=\"search-sort\">\n          <div className=\"dropdown\">\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.currentTarget.value)}\n            >\n              <option value=\"-timestamp\">Newest</option>\n              <option value=\"timestamp\">Oldest</option>\n              <option value=\"title\">Title A-Z</option>\n              <option value=\"-title\">Title Z-A</option>\n              <option value=\"-has_made\">Has Been Cooked</option>\n              <option value=\"has_made\">Has NOT Been Cooked</option>\n            </select>\n          </div>\n          <div className=\"search-wrapper\">\n            <div className=\"search\">\n              <input\n                type=\"search\"\n                placeholder=\"Search\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n              />\n              <span className=\"cancel\" onClick={() => setQuery(\"\")}>\n                x\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"scrape-wrapper\">\n          <div className=\"scrape\">\n            <form\n            // onSubmit={e => connect(e)}\n            >\n              <label htmlFor=\"#scrape-input\">Create New Recipe Entry:</label>\n              <input\n                type=\"text\"\n                className=\"scrape-text\"\n                id=\"scrape-input\"\n                placeholder=\"Paste URL Here\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n              />\n              <input\n                className=\"scrape-submit\"\n                type=\"submit\"\n                value=\"Submit\"\n                disabled={url.length ? false : true}\n              />\n            </form>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-container\">\n        {filteredRecipes.length ? (\n          filteredRecipes.map((recipe) => (\n            <RecipeCard\n              key={recipe.unique_id}\n              unique_id={recipe.unique_id}\n              title={recipe.title}\n              imgSrc={recipe.img_src}\n              author={recipe.author}\n              rating={recipe.rating}\n              description={recipe.description}\n              timestamp={recipe.timestamp}\n              hasMade={recipe.has_made}\n              tags={recipe.tags}\n              tagsList={tagsList}\n              notes={recipe.notes}\n              url={recipe.url}\n              deleteRecipe={handleDelete}\n              updateRecipe={handleUpdate}\n            />\n          ))\n        ) : (\n          <p>Fetching Saved Recipes</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",["41","42"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["43","44","45","46","47"],"import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport ShowMoreText from \"react-show-more-text\";\nimport Popup from \"reactjs-popup\";\nimport StarRatings from \"react-star-ratings\";\nimport * as api from \"../utils/api\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst Card = ({\n  unique_id,\n  title,\n  imgSrc,\n  author,\n  rating,\n  description,\n  timestamp,\n  hasMade,\n  notes,\n  tags,\n  tagsList,\n  url,\n  deleteRecipe,\n  updateRecipe,\n}) => {\n  const [tagsToAdd, setTagsToAdd] = useState(\"\");\n  // const [quickTag, setQuickTag] = useState(\"\");\n  const [notesToAdd, setNotesToAdd] = useState(\"\");\n  const [isEditing, setIsEditing] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [newRating, setNewRating] = useState(rating);\n  const [currentTab, setCurrentTab] = useState(1);\n  const closeModal = () => [setOpen(false), setCurrentTab(1)];\n\n  const add = (e, field) => {\n    e.preventDefault();\n    setIsEditing(false);\n    //     setQuickTag(\"\");\n\n    switch (field) {\n      case \"tags\":\n        let newTags = tagsToAdd.trim();\n        if (newTags.length) {\n          // if (newTags.length === 1) {\n          updateRecipe(\"tags_add\", unique_id, newTags);\n          // } else {\n          //   newTags = newTags.split(\",\");\n          // newTags.forEach((tag) => {\n          // updateRecipe(\"tags_add\", unique_id, newTags);\n          // });\n        }\n        setTagsToAdd(\"\");\n        // }\n        break;\n      case \"notes\":\n        let newNotes = notesToAdd.trim();\n        if (newNotes.length) {\n          // let newNotes = notesToAdd.split(\"\\n\\n\");\n          // newNotes.forEach((note) => {\n          updateRecipe(\"notes_add\", unique_id, notesToAdd);\n          // });\n          setNotesToAdd(\"\");\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const remove = (e, field) => {\n    e.preventDefault();\n    let itemToRemove = e.target.closest(\"li\").textContent.slice(0, -1);\n\n    switch (field) {\n      case \"tags\":\n        updateRecipe(\"tags_remove\", unique_id, itemToRemove.trim());\n        break;\n      case \"notes\":\n        updateRecipe(\"notes_remove\", unique_id, itemToRemove.trim());\n        break;\n      default:\n        break;\n    }\n  };\n\n  const ratingChanged = (rating) => {\n    setNewRating(rating);\n    updateRecipe(\"rating\", unique_id, rating);\n  };\n\n  const renderTab1 = () => {\n    return (\n      <>\n        <div className=\"title\">\n          <h2>{title}</h2>\n        </div>\n        <div className=\"title\">\n          <p>\n            Author:{\" \"}\n            <strong>\n              <em>{author.length ? author : \"No Assigned Author\"}</em>\n            </strong>\n          </p>\n        </div>\n        <div className=\"rating-hasMade\">\n          <div className=\"rating\">\n            <StarRatings\n              rating={newRating}\n              starRatedColor=\"#f04a26\"\n              starEmptyColor=\"#808080\"\n              changeRating={ratingChanged}\n              numberOfStars={5}\n              starDimension=\"25px\"\n              starSpacing=\"3px\"\n              name=\"rating\"\n            />\n            <button onClick={() => ratingChanged(0)}>Reset</button>\n          </div>\n          <div className=\"has-made\">\n            <input\n              type=\"checkbox\"\n              className=\"check\"\n              name=\"check\"\n              value={hasMade}\n              onChange={() => console.log(\"click\")}\n              checked={hasMade}\n            />\n            <label\n              htmlFor=\"check\"\n              onClick={() => updateRecipe(\"has_made\", unique_id, hasMade)}\n            >\n              Cooked\n            </label>\n          </div>\n        </div>\n        <div\n          className={description ? \"description\" : \"description description-em\"}\n        >\n          <ShowMoreText\n            lines={5}\n            more=\"Show more\"\n            less=\"Show less\"\n            anchorClass=\"description-anchor\"\n            expanded={false}\n            width={0}\n          >\n            {description\n              ? description\n              : \"There is no description for this recipe.\"}\n          </ShowMoreText>\n        </div>\n      </>\n    );\n  };\n\n  // const join = (value) => {\n  //     setQuickTag(value)\n  //     if (tagsToAdd.length === 0) {\n  //         setTagsToAdd(value)\n  //     } else {\n  //         let combinedTags = tagsToAdd + \",\" + value\n  //         setTagsToAdd(combinedTags)\n  //     }\n  // }\n\n  const renderTab2 = () => {\n    return (\n      <div className=\"tags-wrapper\">\n        <div className=\"tags-header\">\n          <p>\n            <strong>Tagged As:</strong>\n          </p>\n          {isEditing ? (\n            <form onSubmit={(e) => add(e, \"tags\")}>\n              <div className=\"inner-form\">\n                <textarea\n                  name=\"tags\"\n                  placeholder=\"Enter ',' delimited tags\"\n                  rows=\"2\"\n                  value={tagsToAdd}\n                  onChange={(e) => setTagsToAdd(e.target.value)}\n                />\n                {/* <div className=\"dropdown\">\n                                    <div> */}\n                {/* <select\n                                    value={quickTag}\n                                    onChange={e => join(e.currentTarget.value)}>\n                                    <option value=\"\" disabled={true}>Quick Add Tags</option>\n                                    {tagsList.map((tag, i) => (\n                                        <option\n                                            value={tag}\n                                            key={tag + i}\n                                        >{tag}</option>\n                                    ))}\n                                </select> */}\n                {/* </div>\n                                </div> */}\n              </div>\n              <button type=\"submit\">\n                {tagsToAdd.length > 0 ? \"Submit\" : \"Close\"}\n              </button>\n            </form>\n          ) : (\n            <p className=\"add\" onClick={() => setIsEditing(true)}>\n              +\n            </p>\n          )}\n        </div>\n        {tags.length > 0 ? (\n          <ul className=\"tags\">\n            {tags.map((tag, i) => (\n              <li key={uuidv4()}>\n                {tag}\n                <div className=\"delete-tag\" onClick={(e) => remove(e, \"tags\")}>\n                  <span>x</span>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>\n            <em>This recipe has not been tagged yet</em>\n          </p>\n        )}\n        <div className=\"notes-wrapper\">\n          <div className=\"notes\">\n            {notes.length > 0 ? (\n              <ol>\n                {notes.map((note) => (\n                  <li key={uuidv4()}>\n                    {note}\n                    <div\n                      className=\"delete-note\"\n                      onClick={(e) => remove(e, \"notes\")}\n                    >\n                      <span>x</span>\n                    </div>\n                  </li>\n                ))}\n              </ol>\n            ) : (\n              <p>\n                <em>There are no notes for this recipe yet.</em>\n              </p>\n            )}\n          </div>\n          <div className=\"add-notes\">\n            <form onSubmit={(e) => add(e, \"notes\")}>\n              <textarea\n                name=\"notes\"\n                placeholder=\"Add additional notes here.\"\n                rows=\"3\"\n                value={notesToAdd}\n                onChange={(e) => setNotesToAdd(e.target.value)}\n              />\n              <button type=\"submit\">Add Note</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-top\">\n        <img\n          src={imgSrc ? imgSrc : \"./graphics/default_image.jpg\"}\n          onClick={() => setOpen((o) => !o)}\n        />\n        <Popup trigger={<span className=\"delete\"></span>} modal>\n          {(close) => (\n            <div className=\"delete-modal\">\n              <button className=\"close\" onClick={close}>\n                X\n              </button>\n              <div className=\"header\">\n                Are You Sure that You Want to Delete this Recipe???\n              </div>\n              <button\n                className=\"delete\"\n                onClick={() => deleteRecipe(unique_id)}\n              >\n                Delete this Recipe Entry\n              </button>\n            </div>\n          )}\n        </Popup>\n      </div>\n      <div className=\"card-bottom\">\n        <div className=\"title-wrapper\">\n          <h4 onClick={() => setOpen((o) => !o)}>{title}</h4>\n          <div className=\"rating-hasMade\">\n            <div className=\"rating\">\n              <StarRatings\n                rating={newRating}\n                starRatedColor=\"#f04a26\"\n                starEmptyColor=\"#808080\"\n                changeRating={ratingChanged}\n                numberOfStars={5}\n                starDimension=\"22px\"\n                starSpacing=\"2px\"\n                name=\"rating\"\n              />\n            </div>\n            <div className=\"has-made\">\n              <input\n                type=\"checkbox\"\n                className=\"check\"\n                name=\"check\"\n                value={hasMade}\n                onChange={() => console.log(\"click\")}\n                checked={hasMade}\n              />\n              <label\n                htmlFor=\"check\"\n                onClick={() => updateRecipe(\"has_made\", unique_id, hasMade)}\n              >\n                Cooked\n              </label>\n            </div>\n          </div>\n          {/* <p>Author: <strong><em>{author.length ? author : \"No Assigned Author\"}</em></strong></p> */}\n        </div>\n        <div className=\"link-wrapper\">\n          <div className=\"link\">\n            <a href={url} target=\"_blank\">\n              Recipe Link\n            </a>\n          </div>\n          <span className=\"timestamp\">\n            Saved On: {moment(timestamp).format(\"MMMM Do YYYY\")}\n          </span>\n        </div>\n      </div>\n\n      <Popup open={open} closeOnDocumentClick onClose={closeModal}>\n        <div className=\"modal recipe-modal\">\n          <div className=\"recipe-modal-central\">\n            <div className=\"recipe-modal-inner\">\n              <button className=\"close\" onClick={closeModal}>\n                X\n              </button>\n              <div className=\"modal-img\">\n                <div className=\"modal-img-back\">\n                  <img src={imgSrc ? imgSrc : \"./graphics/default_image.jpg\"} />\n                </div>\n              </div>\n              <div className=\"modal-info\">\n                <div className=\"modal-info-inner\">\n                  <div className=\"modal-info-inner-tabs\">\n                    <ul>\n                      <li\n                        className={currentTab === 1 ? \"active\" : \"\"}\n                        onClick={() => setCurrentTab(1)}\n                      >\n                        <h4>INFO</h4>\n                      </li>\n                      <li\n                        className={currentTab === 2 ? \"active\" : \"\"}\n                        onClick={() => setCurrentTab(2)}\n                      >\n                        <h4>TAGS/NOTES</h4>\n                      </li>\n                      <li>\n                        <h4>\n                          <a href={url} target=\"_blank\">\n                            GO TO RECIPE\n                          </a>\n                        </h4>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"modal-info-text\">\n                    {currentTab === 1 ? [renderTab1()] : [renderTab2()]}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Popup>\n    </div>\n  );\n};\n\nexport default Card;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["48","49","50","51"],"import React, { useState, useRef } from 'react';\nimport Editable from \"./Editable\";\n// import firebase from \"../utils/firebase\";\n\nconst Card = ({ recipe, url, setRecipe, setIsOverlay, setUrl }) => {\n\n  const [title, setTitle] = useState(recipe.title);\n  const [imgSrc, setImgSrc] = useState(recipe.imgSrc);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [rating, setRating] = useState(0);\n  const [tags, setTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(\"\");\n  const [hasMade, setHasMade] = useState(false);\n  const inputRef = useRef();\n\n  const createEntry = () => {\n\n    let notes;\n\n    if (allNotes.length > 0) {\n      notes = allNotes.split(\"\\n\\n\")\n    } else {\n      notes = []\n    }\n\n    // firebase\n    //   .firestore()\n    //   .collection(\"recipes\")\n    //   .add({\n    //     title,\n    //     imgSrc,\n    //     author,\n    //     rating,\n    //     description,\n    //     timestamp: Date.now(),\n    //     tags,\n    //     hasMade,\n    //     notes,\n    //     url\n    //   })\n    setRecipe({})\n    setIsOverlay(false)\n    setUrl(\"\");\n  }\n\n  const splitTags = tags => {\n    let split = tags.split(\",\")\n    setTags(split)\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-top\">\n        {imgSrc ?\n          <img src={imgSrc} />\n          :\n          <Editable\n            text={imgSrc}\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"image source\"\n              placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n              rows=\"5\"\n              value={imgSrc}\n              onChange={e => setImgSrc(e.target.value)}\n            />\n          </Editable>\n        }\n      </div>\n      <div className=\"card-bottom\">\n        <div className=\"title-wrapper\">\n          <h3>Title:</h3>\n          <div>\n            <label htmlFor=\"has-made\">Has Made:</label>\n            <input type=\"checkbox\" id=\"has-made\" name=\"has-made\" value={hasMade} onClick={() => setHasMade(!hasMade)} />\n          </div>\n        </div>\n        <Editable\n          text={title}\n          placeholder=\"Click Here to Add Recipe Title\"\n          childRef={inputRef}\n          type=\"textarea\"\n        >\n          <textarea\n            ref={inputRef}\n            name=\"title\"\n            placeholder=\"Click Here to Add Recipe Title\"\n            rows=\"5\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n        </Editable>\n        <h3>Author:</h3>\n        <Editable\n          text={author}\n          placeholder=\"Click Here to Add Recipe Author\"\n          childRef={inputRef}\n          type=\"textarea\"\n        >\n          <textarea\n            ref={inputRef}\n            name=\"author\"\n            placeholder=\"Click Here to Add Recipe Author\"\n            rows=\"5\"\n            value={author}\n            onChange={e => setAuthor(e.target.value)}\n          />\n        </Editable>\n        <div className=\"description\">\n          <h3>Description:</h3>\n          <Editable\n            text={description}\n            placeholder=\"Click Here to Add Recipe Description\"\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"description\"\n              placeholder=\"Click Here to Add Recipe Description\"\n              rows=\"5\"\n              value={description}\n              onChange={e => setDescription(e.target.value)}\n            />\n          </Editable>\n        </div>\n        <div>\n          <h3>Tagged As:</h3>\n          <Editable\n            text={tags.join(\",\")}\n            placeholder=\"Click Here to Add Recipe Tags\"\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"tags\"\n              placeholder=\"Enter ',' separated tags here\"\n              rows=\"5\"\n              value={tags.join(\",\")}\n              onChange={e => splitTags(e.target.value)}\n            />\n          </Editable>\n        </div>\n        <div>\n          <h3>Additional Notes:</h3>\n          <Editable\n            text={allNotes}\n            placeholder=\"Click Here to Add Additional Notes\"\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"notes\"\n              placeholder=\"Add additional notes here.\"\n              rows=\"10\"\n              value={allNotes}\n              onChange={e => setAllNotes(e.target.value)}\n            />\n          </Editable>\n        </div>\n        <div className=\"link\">\n          <button onClick={createEntry} >Create Entry</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Editable.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":12,"column":10,"nodeType":"58","messageId":"59","endLine":12,"endColumn":24},{"ruleId":"56","severity":1,"message":"60","line":13,"column":10,"nodeType":"58","messageId":"59","endLine":13,"endColumn":20},{"ruleId":"56","severity":1,"message":"61","line":14,"column":10,"nodeType":"58","messageId":"59","endLine":14,"endColumn":16},{"ruleId":"56","severity":1,"message":"62","line":15,"column":10,"nodeType":"58","messageId":"59","endLine":15,"endColumn":18},{"ruleId":"56","severity":1,"message":"63","line":17,"column":20,"nodeType":"58","messageId":"59","endLine":17,"endColumn":31},{"ruleId":"64","severity":1,"message":"65","line":27,"column":6,"nodeType":"66","endLine":27,"endColumn":14,"suggestions":"67"},{"ruleId":"56","severity":1,"message":"68","line":67,"column":11,"nodeType":"58","messageId":"59","endLine":67,"endColumn":19},{"ruleId":"56","severity":1,"message":"68","line":98,"column":11,"nodeType":"58","messageId":"59","endLine":98,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":162,"column":23,"nodeType":"71","endLine":162,"endColumn":94},{"ruleId":"72","severity":1,"message":"73","line":5,"column":14,"nodeType":"74","messageId":"75","endLine":5,"endColumn":16},{"ruleId":"72","severity":1,"message":"73","line":5,"column":40,"nodeType":"74","messageId":"75","endLine":5,"endColumn":42},{"ruleId":"56","severity":1,"message":"76","line":6,"column":13,"nodeType":"58","messageId":"59","endLine":6,"endColumn":16},{"ruleId":"69","severity":1,"message":"70","line":266,"column":9,"nodeType":"71","endLine":269,"endColumn":11},{"ruleId":"77","severity":1,"message":"78","line":326,"column":27,"nodeType":"79","endLine":326,"endColumn":42},{"ruleId":"69","severity":1,"message":"70","line":345,"column":19,"nodeType":"71","endLine":345,"endColumn":81},{"ruleId":"77","severity":1,"message":"78","line":366,"column":41,"nodeType":"79","endLine":366,"endColumn":56},{"ruleId":"56","severity":1,"message":"80","line":11,"column":10,"nodeType":"58","messageId":"59","endLine":11,"endColumn":16},{"ruleId":"56","severity":1,"message":"81","line":11,"column":18,"nodeType":"58","messageId":"59","endLine":11,"endColumn":27},{"ruleId":"56","severity":1,"message":"82","line":24,"column":7,"nodeType":"58","messageId":"59","endLine":24,"endColumn":12},{"ruleId":"69","severity":1,"message":"70","line":56,"column":11,"nodeType":"71","endLine":56,"endColumn":31},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'crawlingStatus' is assigned a value but never used.","Identifier","unusedVar","'allRecipes' is assigned a value but never used.","'taskID' is assigned a value but never used.","'uniqueID' is assigned a value but never used.","'setTagsList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.","ArrayExpression",["85"],"'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'api' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'rating' is assigned a value but never used.","'setRating' is assigned a value but never used.","'notes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"88","text":"89"},[955,963],"[apiStateReferences, sortBy]"]