[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5"},{"size":484,"mtime":1609027700211,"results":"6","hashOfConfig":"7"},{"size":19757,"mtime":1648430905103,"results":"8","hashOfConfig":"7"},{"size":2333,"mtime":1648428937836,"results":"9","hashOfConfig":"7"},{"size":24599,"mtime":1648429467341,"results":"10","hashOfConfig":"7"},{"size":7352,"mtime":1648429421713,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1yhrrie",{"filePath":"15","messages":"16","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["25","26"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["27","28","29","30","31","32","33","34","35"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["36"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Typography from \"@mui/material/Typography\";\nimport { Button, CardActionArea, CardActions } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport Rating from \"@mui/material/Rating\";\nimport Chip from \"@mui/material/Chip\";\nimport Stack from \"@mui/material/Stack\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport Link from \"@mui/material/Link\";\nimport Modal from \"@mui/material/Modal\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport Slide from \"@mui/material/Slide\";\nimport Grid from \"@mui/material/Grid\";\nimport Tab from \"@mui/material/Tab\";\nimport TabContext from \"@mui/lab/TabContext\";\nimport TabList from \"@mui/lab/TabList\";\nimport TabPanel from \"@mui/lab/TabPanel\";\nimport Divider from \"@mui/material/Divider\";\nimport Fab from \"@mui/material/Fab\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Popover from \"@mui/material/Popover\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport DeleteRoundedIcon from \"@mui/icons-material/DeleteRounded\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst RecipeCard = ({\n  recipeInfo,\n  quickTagOptions,\n  deleteRecipe,\n  updateRecipe,\n}) => {\n  const [recipe, setRecipe] = useState(recipeInfo);\n  const [popoverType, setPopoverType] = useState(\"\");\n  const [tagsToAdd, setTagsToAdd] = useState(\"\");\n  const [notesToAdd, setNotesToAdd] = useState(\"\");\n  const [newRating, setNewRating] = useState(recipe.rating);\n  const [open, setOpen] = useState(false);\n  const [tabValue, setTabValue] = useState(\"1\");\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [deleteAnchorEl, setDeleteAnchorEl] = useState(null);\n\n  useEffect(() => {\n    setRecipe(recipeInfo);\n    setNewRating(recipeInfo.rating);\n  }, [recipeInfo]);\n\n  const add = (e, field) => {\n    e.preventDefault();\n\n    switch (field) {\n      case \"tags\":\n        if (tagsToAdd.length) {\n          let newTags = tagsToAdd.join(\",\").toLowerCase();\n          updateRecipe(\"tags_add\", recipe.unique_id, newTags, setRecipe);\n        }\n        handleClosePopover();\n        setTagsToAdd(\"\");\n        break;\n      case \"notes\":\n        if (notesToAdd.length) {\n          let newNotes = notesToAdd.trim();\n          updateRecipe(\"notes_add\", recipe.unique_id, newNotes, setRecipe);\n          handleClosePopover();\n          setNotesToAdd(\"\");\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const remove = (e, field) => {\n    e.preventDefault();\n    let itemToRemove = e.target.closest(\"div\").firstChild.textContent;\n\n    switch (field) {\n      case \"tags\":\n        updateRecipe(\n          \"tags_remove\",\n          recipe.unique_id,\n          itemToRemove.trim(),\n          setRecipe\n        );\n        break;\n      case \"notes\":\n        updateRecipe(\n          \"notes_remove\",\n          recipe.unique_id,\n          itemToRemove.trim(),\n          setRecipe\n        );\n        break;\n      default:\n        break;\n    }\n  };\n\n  const ratingChanged = (e, rating) => {\n    if (rating !== null) {\n      setNewRating(rating);\n      updateRecipe(\"rating\", recipe.unique_id, rating, setRecipe);\n    }\n  };\n\n  const handleHasMade = () => {\n    updateRecipe(\"has_made\", recipe.unique_id, recipe.has_made, setRecipe);\n  };\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const handleTabChange = (e, newValue) => {\n    setTabValue(newValue);\n  };\n  const handleClickPopover = (e, type) => {\n    setPopoverType(type);\n    setAnchorEl(e.currentTarget);\n  };\n  const handleClickDeletePopover = (e) => {\n    setDeleteAnchorEl(e.currentTarget);\n  };\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n    setPopoverType(\"\");\n  };\n  const handleCloseDeletePopover = () => {\n    setDeleteAnchorEl(null);\n  };\n  const popoverOpen = Boolean(anchorEl);\n  const deletePopoverOpen = Boolean(deleteAnchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  const titleCase = (str) => {\n    return str\n      .toLowerCase()\n      .split(\" \")\n      .map(function (word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(\" \");\n  };\n\n  return (\n    <>\n      <Card sx={{ width: 345, position: \"relative\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"error\"\n          sx={{\n            position: \"absolute\",\n            top: 0,\n            right: 0,\n            width: \"fit-content!important\",\n            minWidth: 0,\n            p: \"6px\",\n            zIndex: 10,\n            bgcolor: \"rgba(169,169,169, 0.5)\",\n          }}\n          onClick={(e) => handleClickDeletePopover(e)}\n        >\n          {\" \"}\n          <DeleteRoundedIcon\n            sx={{\n              color: \"rgba(255,255,255, 0.7)\",\n            }}\n          />\n        </Button>\n        <Popover\n          id={id}\n          open={deletePopoverOpen}\n          anchorEl={deleteAnchorEl}\n          onClose={handleCloseDeletePopover}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"left\",\n          }}\n          transformOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\",\n          }}\n        >\n          <Box\n            component=\"div\"\n            sx={{\n              \"& .MuiTextField-root\": {\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n              },\n            }}\n            onSubmit={(e) => add(e, \"notes\")}\n            noValidate\n            autoComplete=\"off\"\n          >\n            <div style={{ width: 300, padding: 10, textAlign: \"center\" }}>\n              <Typography gutterBottom variant=\"body1\" component=\"p\" mb={1}>\n                <strong>Are you sure you want to delete this recipe???</strong>\n              </Typography>\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                endIcon={<DeleteRoundedIcon />}\n                onClick={() => [\n                  deleteRecipe(recipe.unique_id, \"recipes\"),\n                  handleCloseDeletePopover,\n                ]}\n              >\n                {\" Delete Recipe \"}\n              </Button>\n            </div>\n          </Box>{\" \"}\n        </Popover>\n        <CardActionArea onClick={handleOpen}>\n          <CardMedia\n            component=\"img\"\n            height=\"140\"\n            image={\n              recipe.img_src\n                ? recipe.img_src\n                : \"./static/graphics/default_image.jpg\"\n            }\n          />\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"body1\"\n              component=\"p\"\n              mb={0}\n              sx={{\n                height: \"50px\",\n                lineClamp: 2,\n                textOverflow: \"ellipsis\",\n                overflow: \"hidden\",\n              }}\n            >\n              <strong>{titleCase(recipe.title)}</strong>\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Saved On: {moment(recipe.timestamp).format(\"MMMM Do YYYY\")}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Box\n            sx={{\n              width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <Rating\n              name=\"simple-controlled\"\n              value={newRating}\n              onChange={ratingChanged}\n            />\n            <Stack direction=\"row\" spacing={1}>\n              <Chip\n                label=\"Cooked\"\n                variant={recipe.has_made ? null : \"outlined\"}\n                onClick={handleHasMade}\n                color=\"error\"\n              />\n            </Stack>\n          </Box>\n        </CardActions>\n        <CardActions sx={{ padding: \"8px 0 0 0\" }}>\n          <Box\n            sx={{\n              width: \"100%\",\n            }}\n          >\n            <Link\n              href={recipe.url}\n              underline=\"none\"\n              color=\"inherit\"\n              target=\"_blank\"\n            >\n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                endIcon={<SendIcon />}\n                sx={{\n                  width: \"100%\",\n                }}\n              >\n                {\"Go to Recipe\"}\n              </Button>\n            </Link>\n          </Box>\n        </CardActions>\n      </Card>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          overflow: \"scroll\",\n          paddingBottom: 20,\n          paddingTop: 80,\n        }}\n      >\n        <Slide direction=\"up\" in={open} mountOnEnter unmountOnExit>\n          <div className=\"blog-slider\">\n            <div className=\"blog-slider__wrp swiper-wrapper\">\n              <div className=\"blog-slider__item swiper-slide\">\n                <div className=\"blog-slider__img\">\n                  <img\n                    src={\n                      recipe.img_src\n                        ? recipe.img_src\n                        : \"./static/graphics/default_image.jpg\"\n                    }\n                  />\n                </div>\n                <div className=\"blog-slider__content\">\n                  <Grid container>\n                    <Grid item xs={12}>\n                      <TabContext value={tabValue} sx={{ color: \"error\" }}>\n                        <TabList\n                          value={tabValue}\n                          onChange={handleTabChange}\n                          indicatorColor=\"primary\"\n                          aria-label=\"secondary tabs example\"\n                        >\n                          <Tab value=\"1\" label=\"Info\" />\n                          <Tab value=\"2\" label=\"Tags/Notes\" />\n                        </TabList>\n                        <TabPanel value=\"1\">\n                          <Typography variant=\"body1\" component=\"p\" mb={1}>\n                            <strong>{recipe.title}</strong>\n                          </Typography>\n                          <Typography variant=\"body1\" component=\"p\" mb={1}>\n                            <strong>Author:</strong>{\" \"}\n                            <em>\n                              {recipe.author.length\n                                ? recipe.author\n                                : \"No Assigned Author\"}\n                            </em>\n                          </Typography>\n                          <Typography variant=\"body1\" component=\"p\">\n                            {recipe.description\n                              ? recipe.description\n                              : \"There is no description for this \"}\n                          </Typography>\n                        </TabPanel>\n                        <TabPanel value=\"2\">\n                          <Typography\n                            variant=\"body1\"\n                            component=\"p\"\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              alignItems: \"center\",\n                            }}\n                          >\n                            <strong>\n                              <em>Tagged As:</em>\n                            </strong>\n                            <Fab\n                              aria-describedby={id}\n                              size=\"small\"\n                              color=\"error\"\n                              aria-label=\"add\"\n                              style={{\n                                width: \"30px\",\n                                height: \"30px\",\n                                minHeight: \"30px\",\n                              }}\n                              onClick={(e) => handleClickPopover(e, \"tags\")}\n                            >\n                              <AddIcon />\n                            </Fab>\n                          </Typography>\n                          <Divider\n                            variant=\"left\"\n                            style={{ marginTop: \"5px\", marginBottom: \"10px\" }}\n                          />\n                          <Stack\n                            direction=\"row\"\n                            spacing={1}\n                            style={{ display: \"flex\", flexWrap: \"wrap\" }}\n                          >\n                            {recipe.tags.length > 0 ? (\n                              recipe.tags.map((tag, i) => (\n                                <Chip\n                                  key={uuidv4()}\n                                  label={tag}\n                                  variant=\"outlined\"\n                                  color=\"error\"\n                                  onDelete={(e) => remove(e, \"tags\")}\n                                  style={{ margin: \"8px 0 0 8px\" }}\n                                />\n                              ))\n                            ) : (\n                              <Typography variant=\"body2\" component=\"p\">\n                                <em>This recipe has not been tagged yet</em>\n                              </Typography>\n                            )}\n                          </Stack>\n                          <Typography\n                            variant=\"body1\"\n                            component=\"p\"\n                            mt={2}\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-between\",\n                              alignItems: \"center\",\n                            }}\n                          >\n                            <strong>\n                              <em>Notes: </em>\n                            </strong>\n                            <Fab\n                              aria-describedby={id}\n                              size=\"small\"\n                              color=\"error\"\n                              aria-label=\"add\"\n                              style={{\n                                width: \"30px\",\n                                height: \"30px\",\n                                minHeight: \"30px\",\n                              }}\n                              onClick={(e) => handleClickPopover(e, \"notes\")}\n                            >\n                              <AddIcon />\n                            </Fab>\n                          </Typography>\n                          <Divider\n                            variant=\"left\"\n                            style={{ marginTop: \"5px\", marginBottom: \"10px\" }}\n                          />\n                          <Stack direction=\"column\" spacing={1}>\n                            {recipe.notes.length > 0 ? (\n                              recipe.notes.map((note, i) => (\n                                <Chip\n                                  key={uuidv4()}\n                                  label={note}\n                                  variant=\"outlined\"\n                                  color=\"error\"\n                                  onDelete={(e) => remove(e, \"notes\")}\n                                  style={{\n                                    color: \"#000\",\n                                    display: \"flex\",\n                                    justifyContent: \"space-between\",\n                                  }}\n                                />\n                              ))\n                            ) : (\n                              <Typography variant=\"body2\" component=\"p\">\n                                <em>This recipe has no notes yet</em>\n                              </Typography>\n                            )}\n                          </Stack>\n                          <Popover\n                            id={id}\n                            open={popoverOpen}\n                            anchorEl={anchorEl}\n                            onClose={handleClosePopover}\n                            anchorOrigin={{\n                              vertical: \"top\",\n                              horizontal: \"left\",\n                            }}\n                            transformOrigin={{\n                              vertical: \"center\",\n                              horizontal: \"right\",\n                            }}\n                          >\n                            {popoverType === \"notes\" ? (\n                              <Box\n                                component=\"form\"\n                                sx={{\n                                  \"& .MuiTextField-root\": {\n                                    display: \"flex\",\n                                    justifyContent: \"flex-end\",\n                                  },\n                                }}\n                                onSubmit={(e) => add(e, \"notes\")}\n                                noValidate\n                                autoComplete=\"off\"\n                              >\n                                <div style={{ width: 400, padding: 8 }}>\n                                  <TextField\n                                    id=\"outlined-basic\"\n                                    label=\"Notes\"\n                                    placeholder=\"Add new notes here...\"\n                                    variant=\"outlined\"\n                                    multiline\n                                    rows={4}\n                                    onChange={(e) =>\n                                      setNotesToAdd(e.target.value.trim())\n                                    }\n                                  />\n                                  <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"error\"\n                                    endIcon={<SaveIcon />}\n                                    sx={{\n                                      margin: \"0 8px 8px 0px\",\n                                      width: \"100%\",\n                                    }}\n                                  >\n                                    {\"Save\"}\n                                  </Button>\n                                </div>\n                              </Box>\n                            ) : (\n                              <Box\n                                component=\"form\"\n                                sx={{\n                                  \"& .MuiTextField-root\": {\n                                    display: \"flex\",\n                                    justifyContent: \"flex-end\",\n                                  },\n                                }}\n                                onSubmit={(e) => add(e, \"tags\")}\n                                noValidate\n                                autoComplete=\"off\"\n                              >\n                                <div style={{ width: 300, padding: 8 }}>\n                                  <Autocomplete\n                                    sx={{ margin: 0 }}\n                                    options={quickTagOptions.sort(\n                                      (a, b) =>\n                                        -b.firstLetter.localeCompare(\n                                          a.firstLetter\n                                        )\n                                    )}\n                                    onChange={(e, value) => {\n                                      let tags = [];\n                                      value.forEach((val) =>\n                                        tags.push(val.tag.trim())\n                                      );\n                                      setTagsToAdd(tags);\n                                    }}\n                                    multiple={true}\n                                    freeSolo\n                                    disableCloseOnSelect\n                                    filterOptions={(options, params) => {\n                                      const filtered = filter(options, params);\n\n                                      const { inputValue } = params;\n                                      // Suggest the creation of a new value\n                                      const isExisting = options.some(\n                                        (option) => inputValue === option.tag\n                                      );\n                                      if (inputValue !== \"\" && !isExisting) {\n                                        filtered.push({\n                                          inputValue,\n                                          tag: inputValue,\n                                        });\n                                      }\n                                      return filtered;\n                                    }}\n                                    selectOnFocus\n                                    clearOnBlur\n                                    handleHomeEndKeys\n                                    groupBy={(option) => option.firstLetter}\n                                    getOptionLabel={(option) => {\n                                      if (typeof option === \"string\") {\n                                        return option;\n                                      }\n                                      if (option.inputValue) {\n                                        return option.inputValue;\n                                      }\n                                      return option.tag;\n                                    }}\n                                    renderOption={(\n                                      props,\n                                      option,\n                                      { selected }\n                                    ) => (\n                                      <li {...props}>\n                                        <Checkbox\n                                          icon={icon}\n                                          checkedIcon={checkedIcon}\n                                          style={{ marginRight: 8 }}\n                                          checked={selected}\n                                        />\n                                        {option.tag}\n                                      </li>\n                                    )}\n                                    renderInput={(params) => (\n                                      <TextField\n                                        {...params}\n                                        label=\"Tags\"\n                                        placeholder=\"Add tags here\"\n                                      />\n                                    )}\n                                  />\n                                  <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"error\"\n                                    endIcon={<SaveIcon />}\n                                    sx={{\n                                      margin: \"0 8px 8px 0px\",\n                                      width: \"100%\",\n                                    }}\n                                  >\n                                    {\"Save\"}\n                                  </Button>\n                                </div>\n                              </Box>\n                            )}\n                          </Popover>\n                        </TabPanel>\n                      </TabContext>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n            </div>\n            <div className=\"blog-slider__pagination\"></div>\n          </div>\n        </Slide>\n      </Modal>\n    </>\n  );\n};\nexport default RecipeCard;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["37"],"import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Button } from \"@mui/material\";\nimport Icon from \"@mdi/react\";\nimport { mdiDog } from \"@mdi/js\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst RecipeEntry = ({\n  recipe,\n  unique_id,\n  url,\n  setRecipe,\n  setOpenOverlay,\n  setUrl,\n  handleCreate,\n  handleDelete,\n  quickTagOptions,\n  type,\n  setType,\n}) => {\n  const [title, setTitle] = useState(recipe.title);\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [tags, setTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(\"\");\n  const [hasMade, setHasMade] = useState(false);\n\n  const createEntry = () => {\n    let notes;\n\n    if (allNotes.length > 0) {\n      notes = [allNotes.trim()];\n    } else {\n      notes = [];\n    }\n\n    handleCreate({\n      unique_id: unique_id,\n      title: titleCase(title),\n      url: url,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      notes: notes,\n      rating: 0,\n      tags: tags,\n    });\n    setRecipe({});\n    setOpenOverlay(false);\n    if (type === \"crawl\") {\n      handleDelete(recipe.unique_id, \"crawledrecipe\");\n    }\n    setUrl(\"\");\n    setType(\"\");\n  };\n\n  const titleCase = (str) => {\n    return str\n      .toLowerCase()\n      .split(\" \")\n      .map(function (word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(\" \");\n  };\n\n  return (\n    <Box component=\"div\">\n      <Box\n        component=\"form\"\n        sx={{\n          \"& .MuiTextField-root\": {\n            display: \"flex\",\n            justifyContent: \"center\",\n          },\n        }}\n        autoComplete=\"off\"\n      >\n        {type === \"blank\" ? (\n          <div>\n            <TextField\n              id=\"standard-helperText\"\n              label=\"Recipe URL\"\n              variant=\"filled\"\n              required\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              sx={{ m: 2 }}\n            />\n          </div>\n        ) : null}\n        <div style={{ textAlign: \"center\" }}>\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          ) : (\n            <TextField\n              id=\"standard-helperText\"\n              label=\"Recipe Image\"\n              placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n              variant=\"filled\"\n              value={imgSrc}\n              onChange={(e) => setImgSrc(e.target.value)}\n              sx={{ m: 2 }}\n            />\n          )}\n        </div>\n        <div>\n          <FormControlLabel\n            value=\"Has Made?\"\n            control={\n              <Checkbox value={hasMade} onClick={() => setHasMade(!hasMade)} />\n            }\n            label=\"Has Made?\"\n            labelPlacement=\"start\"\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Recipe Title\"\n            variant=\"filled\"\n            required\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Recipe Author\"\n            variant=\"filled\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Recipe Description\"\n            variant=\"filled\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <div>\n          <Autocomplete\n            sx={{ m: 2 }}\n            options={quickTagOptions.sort(\n              (a, b) => -b.firstLetter.localeCompare(a.firstLetter)\n            )}\n            onChange={(e, value) => {\n              let tags = [];\n              value.forEach((val) => tags.push(val.tag.trim()));\n              setTags(tags);\n            }}\n            multiple={true}\n            freeSolo\n            disableCloseOnSelect\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params);\n\n              const { inputValue } = params;\n              // Suggest the creation of a new value\n              const isExisting = options.some(\n                (option) => inputValue === option.tag\n              );\n              if (inputValue !== \"\" && !isExisting) {\n                filtered.push({\n                  inputValue,\n                  tag: inputValue,\n                });\n              }\n              return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            groupBy={(option) => option.firstLetter}\n            getOptionLabel={(option) => {\n              if (typeof option === \"string\") {\n                return option;\n              }\n              if (option.inputValue) {\n                return option.inputValue;\n              }\n              return option.tag;\n            }}\n            renderOption={(props, option, { selected }) => (\n              <li {...props}>\n                <Checkbox\n                  icon={icon}\n                  checkedIcon={checkedIcon}\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.tag}\n              </li>\n            )}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Add Tags\" variant=\"filled\" />\n            )}\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Add Notes\"\n            variant=\"filled\"\n            value={allNotes}\n            onChange={(e) => setAllNotes(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"error\"\n          disabled={title.length && url.length ? false : true}\n          onClick={createEntry}\n          endIcon={\n            <Icon\n              path={mdiDog}\n              title=\"Dog\"\n              size={1}\n              horizontal\n              vertical\n              rotate={180}\n              color={title.length ? \"white\" : \"darkgray\"}\n            />\n          }\n          sx={{\n            margin: \"0 8px 8px 0px\",\n            width: \"100%\",\n          }}\n        >\n          {\"Create Entry\"}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecipeEntry;\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":37,"column":10,"nodeType":"44","messageId":"45","endLine":37,"endColumn":24},{"ruleId":"42","severity":1,"message":"46","line":39,"column":10,"nodeType":"44","messageId":"45","endLine":39,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":63,"column":6,"nodeType":"49","endLine":63,"endColumn":14,"suggestions":"50"},{"ruleId":"42","severity":1,"message":"51","line":106,"column":11,"nodeType":"44","messageId":"45","endLine":106,"endColumn":19},{"ruleId":"42","severity":1,"message":"51","line":133,"column":11,"nodeType":"44","messageId":"45","endLine":133,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":199,"column":43,"nodeType":"54","messageId":"55","endLine":199,"endColumn":45},{"ruleId":"47","severity":1,"message":"56","line":229,"column":6,"nodeType":"49","endLine":229,"endColumn":13,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":254,"column":18,"nodeType":"60","messageId":"61","endLine":254,"endColumn":20},{"ruleId":"62","severity":1,"message":"63","line":625,"column":21,"nodeType":"64","endLine":625,"endColumn":65},{"ruleId":"62","severity":1,"message":"63","line":328,"column":19,"nodeType":"64","endLine":334,"endColumn":21},{"ruleId":"62","severity":1,"message":"63","line":105,"column":13,"nodeType":"64","endLine":108,"endColumn":15},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'crawlingStatus' is assigned a value but never used.","Identifier","unusedVar","'taskID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.","ArrayExpression",["67"],"'response' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'allRecipes'. Either include it or remove the dependency array.",["68"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"73","text":"74"},"Update the dependencies array to be: [allRecipes, query]",{"range":"75","text":"76"},[2480,2488],"[apiStateReferences, sortBy]",[7092,7099],"[allRecipes, query]"]