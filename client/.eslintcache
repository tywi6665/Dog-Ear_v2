[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5"},{"size":484,"mtime":1609027700211,"results":"6","hashOfConfig":"7"},{"size":19380,"mtime":1648416381767,"results":"8","hashOfConfig":"7"},{"size":2356,"mtime":1613263192358,"results":"9","hashOfConfig":"7"},{"size":24380,"mtime":1648415504942,"results":"10","hashOfConfig":"7"},{"size":7133,"mtime":1647816002466,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1yhrrie",{"filePath":"15","messages":"16","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["24","25"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["26","27","28","29","30","31","32","33","34"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",[],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["35"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["36"],"import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { Button } from \"@mui/material\";\nimport Icon from \"@mdi/react\";\nimport { mdiDog } from \"@mdi/js\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\nconst filter = createFilterOptions();\n\nconst RecipeEntry = ({\n  recipe,\n  unique_id,\n  url,\n  setRecipe,\n  setOpenOverlay,\n  setUrl,\n  handleCreate,\n  handleDelete,\n  quickTagOptions,\n  type,\n  setType,\n}) => {\n  const [title, setTitle] = useState(recipe.title);\n  const [imgSrc, setImgSrc] = useState(recipe.img_src);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [tags, setTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(\"\");\n  const [hasMade, setHasMade] = useState(false);\n\n  const createEntry = () => {\n    let notes;\n\n    if (allNotes.length > 0) {\n      notes = [allNotes.trim()];\n    } else {\n      notes = [];\n    }\n\n    handleCreate({\n      unique_id: unique_id,\n      title: title,\n      url: url,\n      author: author,\n      img_src: imgSrc,\n      description: description,\n      has_made: hasMade,\n      notes: notes,\n      rating: 0,\n      tags: tags,\n    });\n    setRecipe({});\n    setOpenOverlay(false);\n    if (type === \"crawl\") {\n      handleDelete(recipe.unique_id, \"crawledrecipe\");\n    }\n    setUrl(\"\");\n    setType(\"\");\n  };\n\n  return (\n    <Box component=\"div\">\n      <Box\n        component=\"form\"\n        sx={{\n          \"& .MuiTextField-root\": {\n            display: \"flex\",\n            justifyContent: \"center\",\n          },\n        }}\n        autoComplete=\"off\"\n      >\n        {type === \"blank\" ? (\n          <div>\n            <TextField\n              id=\"standard-helperText\"\n              label=\"Recipe URL\"\n              variant=\"filled\"\n              required\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              sx={{ m: 2 }}\n            />\n          </div>\n        ) : null}\n        <div style={{ textAlign: \"center\" }}>\n          {imgSrc ? (\n            <img\n              src={imgSrc}\n              style={{ maxWidth: \"225px\", maxHeight: \"225px\" }}\n            />\n          ) : (\n            <TextField\n              id=\"standard-helperText\"\n              label=\"Recipe Image\"\n              placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n              variant=\"filled\"\n              value={imgSrc}\n              onChange={(e) => setImgSrc(e.target.value)}\n              sx={{ m: 2 }}\n            />\n          )}\n        </div>\n        <div>\n          <FormControlLabel\n            value=\"Has Made?\"\n            control={\n              <Checkbox value={hasMade} onClick={() => setHasMade(!hasMade)} />\n            }\n            label=\"Has Made?\"\n            labelPlacement=\"start\"\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Recipe Title\"\n            variant=\"filled\"\n            required\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Recipe Author\"\n            variant=\"filled\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            sx={{ m: 2 }}\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Recipe Description\"\n            variant=\"filled\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <div>\n          <Autocomplete\n            sx={{ m: 2 }}\n            options={quickTagOptions.sort(\n              (a, b) => -b.firstLetter.localeCompare(a.firstLetter)\n            )}\n            onChange={(e, value) => {\n              let tags = [];\n              value.forEach((val) => tags.push(val.tag.trim()));\n              setTags(tags);\n            }}\n            multiple={true}\n            freeSolo\n            disableCloseOnSelect\n            filterOptions={(options, params) => {\n              const filtered = filter(options, params);\n\n              const { inputValue } = params;\n              // Suggest the creation of a new value\n              const isExisting = options.some(\n                (option) => inputValue === option.tag\n              );\n              if (inputValue !== \"\" && !isExisting) {\n                filtered.push({\n                  inputValue,\n                  tag: inputValue,\n                });\n              }\n              return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            groupBy={(option) => option.firstLetter}\n            getOptionLabel={(option) => {\n              if (typeof option === \"string\") {\n                return option;\n              }\n              if (option.inputValue) {\n                return option.inputValue;\n              }\n              return option.tag;\n            }}\n            renderOption={(props, option, { selected }) => (\n              <li {...props}>\n                <Checkbox\n                  icon={icon}\n                  checkedIcon={checkedIcon}\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.tag}\n              </li>\n            )}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Add Tags\" variant=\"filled\" />\n            )}\n          />\n        </div>\n        <div>\n          <TextField\n            id=\"standard-helperText\"\n            label=\"Add Notes\"\n            variant=\"filled\"\n            value={allNotes}\n            onChange={(e) => setAllNotes(e.target.value)}\n            sx={{ m: 2 }}\n            multiline\n            maxRows={4}\n          />\n        </div>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"error\"\n          disabled={title.length && url.length ? false : true}\n          onClick={createEntry}\n          endIcon={\n            <Icon\n              path={mdiDog}\n              title=\"Dog\"\n              size={1}\n              horizontal\n              vertical\n              rotate={180}\n              color={title.length ? \"white\" : \"darkgray\"}\n            />\n          }\n          sx={{\n            margin: \"0 8px 8px 0px\",\n            width: \"100%\",\n          }}\n        >\n          {\"Create Entry\"}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RecipeEntry;\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":37,"column":10,"nodeType":"43","messageId":"44","endLine":37,"endColumn":24},{"ruleId":"41","severity":1,"message":"45","line":39,"column":10,"nodeType":"43","messageId":"44","endLine":39,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":63,"column":6,"nodeType":"48","endLine":63,"endColumn":14,"suggestions":"49"},{"ruleId":"41","severity":1,"message":"50","line":102,"column":18,"nodeType":"43","messageId":"44","endLine":102,"endColumn":28},{"ruleId":"41","severity":1,"message":"51","line":106,"column":11,"nodeType":"43","messageId":"44","endLine":106,"endColumn":19},{"ruleId":"41","severity":1,"message":"51","line":133,"column":11,"nodeType":"43","messageId":"44","endLine":133,"endColumn":19},{"ruleId":"46","severity":1,"message":"52","line":225,"column":6,"nodeType":"48","endLine":225,"endColumn":13,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":250,"column":18,"nodeType":"56","messageId":"57","endLine":250,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":610,"column":21,"nodeType":"60","endLine":610,"endColumn":65},{"ruleId":"58","severity":1,"message":"59","line":318,"column":19,"nodeType":"60","endLine":324,"endColumn":21},{"ruleId":"58","severity":1,"message":"59","line":95,"column":13,"nodeType":"60","endLine":98,"endColumn":15},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'crawlingStatus' is assigned a value but never used.","Identifier","unusedVar","'taskID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'apiStateReferences'. Either include it or remove the dependency array.","ArrayExpression",["63"],"'startCrawl' is defined but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allRecipes'. Either include it or remove the dependency array.",["64"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [apiStateReferences, sortBy]",{"range":"69","text":"70"},"Update the dependencies array to be: [allRecipes, query]",{"range":"71","text":"72"},[2481,2489],"[apiStateReferences, sortBy]",[6955,6962],"[allRecipes, query]"]