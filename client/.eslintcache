[{"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js":"1","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js":"2","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js":"3","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js":"4","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js":"5","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Editable.js":"6"},{"size":484,"mtime":1609027700211,"results":"7","hashOfConfig":"8"},{"size":6862,"mtime":1609990878415,"results":"9","hashOfConfig":"8"},{"size":621,"mtime":1609990946235,"results":"10","hashOfConfig":"8"},{"size":14680,"mtime":1609989715831,"results":"11","hashOfConfig":"8"},{"size":4959,"mtime":1609986244136,"results":"12","hashOfConfig":"8"},{"size":1627,"mtime":1609816721699,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1yhrrie",{"filePath":"17","messages":"18","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/index.js",[],["32","33"],"/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/App.js",["34","35","36","37","38","39","40","41","42"],"import React, { useState, useEffect } from 'react';\nimport RecipeCard from './Components/RecipeCard';\nimport RecipeEntry from \"./Components/RecipeEntry\";\nimport './App.scss';\nimport api from './utils/api';\n\nfunction App() {\n\n  const [url, setUrl] = useState('https://food52.com/blog/25722-what-is-marzipan');\n  const [crawlingStatus, setCrawlingStatus] = useState(null);\n  const [allRecipes, setAllRecipes] = useState(null);\n  const [taskID, setTaskID] = useState(null);\n  const [uniqueID, setUniqueID] = useState(null);\n  const [filteredRecipes, setFilteredRecipes] = useState([]);\n  const [tagsList, setTagsList] = useState([])\n  const [sortBy, setSortBy] = useState(\"TIME_DESC\");\n  const [query, setQuery] = useState(\"\");\n  const [isOverlay, setIsOverlay] = useState(false);\n  const [recipe, setRecipe] = useState({});\n\n  let statusInterval = 1;\n\n  useEffect(() => {\n     fetch('api/recipes', {\n          method: 'GET',\n      })\n      .then(response => response.json())\n      .then(data => {\n          console.log(data)\n          setAllRecipes(data.data)\n      setFilteredRecipes(data.data)\n      })\n  }, [])\n\n  async function startCrawl() {\n    if(!url) {\n      return false;\n    }\n    const response = await fetch('api/crawl/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({method: 'POST', url: url}) \n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Success:', data)\n        setTaskID(data.task_id)\n        setUniqueID(data.unique_id)\n        setCrawlingStatus(data.status)\n        statusInterval = setInterval(() => checkCrawlStatus(data.task_id, data.unique_id), 2000)\n      })\n      // .then(statusInterval = setInterval(checkCrawlStatus, 2000))\n      .catch((error) => console.error('Error:', error));\n  }\n\n  async function checkCrawlStatus(task_id, unique_id) {\n    console.log(\"Checking Crawl Status\")\n    console.log(task_id, unique_id)\n    const data = JSON.stringify({\n      method: 'GET', \n      task_id: task_id, \n      unique_id: unique_id\n    })\n    // Making a request to server to ask status of crawling job\n    const response = await fetch('api/crawl/', \n    {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },  \n        body: data  \n      }, \n      data\n      )\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        if (data.data) {\n          clearInterval(statusInterval)\n          setAllRecipes(data.data)\n        } else if (data.error) {\n          clearInterval(statusInterval)\n          console.log(data.error)\n        } else if (data.status) {\n          setCrawlingStatus(data.status)\n        }\n      })\n  }\n\n  return (\n      <div id=\"client_page\">\n        <button onClick={() => startCrawl()}>Click Me!</button>\n      <div className=\"overlay\"\n        style={isOverlay && url.length ? { display: \"block\" } : { display: \"none\" }}\n      >\n        {\n        // loadClient && \n        url && isOverlay ?\n          (<div className=\"entry_popup\">\n            {Object.keys(recipe).length ?\n              <>\n                <header className=\"popup-header\">\n                  <div className=\"back\">\n                    <button \n                    // onClick={() => disconnect()}\n                    ></button>\n                  </div>\n                  <h3><em>Example Recipe Entry:</em></h3>\n                </header>\n                <RecipeEntry\n                  recipe={recipe}\n                  key={recipe.id}\n                  url={url}\n                  setRecipe={setRecipe}\n                  setIsOverlay={setIsOverlay}\n                  setUrl={setUrl}\n                />\n              </>\n              :\n              <>\n                <div className=\"dog-loader\">\n                  <div className=\"dog-head\">\n                    <img src=\"http://www.clker.com/cliparts/j/3/Z/Y/D/5/dog-head-md.png\" />\n                  </div>\n                  <div className=\"dog-body\">\n                  </div>\n                </div>\n                <p className=\"dog-loader-p\"><em>Scraping data...</em></p>\n              </>\n            }\n          </div>)\n          :\n          <></>\n        }\n      </div>\n      <header className=\"page-header\">\n        <div className=\"titles\">\n          <h1>Dog-Ear</h1>\n          <h2>Recipe Repository</h2>\n        </div>\n        <div className=\"dog-image\">\n          <img src=\"./graphics/dog.png\" alt=\"Woof woof\" />\n        </div>\n      </header>\n      <div className=\"interaction-wrapper\">\n        <div className=\"search-sort\">\n          <div className=\"dropdown\">\n            <select value={sortBy} onChange={e => setSortBy(e.currentTarget.value)}>\n              <option value=\"TIME_DESC\">Newest</option>\n              <option value=\"TIME_ASC\">Oldest</option>\n              <option value=\"TITLE_ASC\">Title A-Z</option>\n              <option value=\"TITLE_DESC\">Title Z-A</option>\n              <option value=\"COOKED\">Has Been Cooked</option>\n              <option value=\"NOT_COOKED\">Has NOT Been Cooked</option>\n            </select>\n          </div>\n          <div className=\"search-wrapper\">\n            <div className=\"search\">\n              <input type=\"search\" placeholder=\"Search\" value={query} onChange={e => setQuery(e.target.value)} />\n              <span\n                className=\"cancel\"\n                onClick={() => setQuery(\"\")}>x</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"scrape-wrapper\">\n          <div className=\"scrape\">\n            <form \n            // onSubmit={e => connect(e)}\n            >\n              <label htmlFor=\"#scrape-input\">Create New Recipe Entry:</label>\n              <input type=\"text\"\n                className=\"scrape-text\"\n                id=\"scrape-input\"\n                placeholder=\"Paste URL Here\"\n                value={url} onChange={e => setUrl(e.target.value)}\n              />\n              <input className=\"scrape-submit\"\n                type=\"submit\"\n                value=\"Submit\"\n                disabled={url.length ? false : true} />\n            </form>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-container\">\n        {filteredRecipes ? filteredRecipes.map((recipe) => (\n          <RecipeCard\n            key={recipe.unique_id}\n            docID={recipe.unique_id}\n            title={recipe.title}\n            imgSrc={recipe.img_src}\n            author={recipe.author}\n            rating={recipe.rating}\n            description={recipe.description}\n            timestamp={recipe.timestamp}\n            hasMade={recipe.has_made}\n            tags={recipe.tags}\n            tagsList={tagsList}\n            notes={recipe.notes}\n            url={recipe.url}\n          />\n        )) : <p>Fetching Saved Recipes</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/utils/api.js",["43"],"export default {\n    getAllRecipes: async function() {\n        fetch('api/recipes', {\n            method: 'GET',\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data)\n            return data\n        })\n    },\n    delete: async function(unique_id) {\n        console.log(unique_id)\n        const id = JSON.stringify(unique_id)\n        fetch('api/delete/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n              },  \n            body: {\n                unique_id: id\n            }\n        })\n    }\n    \n}\n\n","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeCard.js",["44","45","46","47","48"],"import React, { useState } from 'react';\nimport moment from \"moment\";\nimport ShowMoreText from 'react-show-more-text';\nimport Popup from 'reactjs-popup';\nimport StarRatings from 'react-star-ratings';\nimport api from '../utils/api';\n\nconst Card = ({ docID, title, imgSrc, author, rating, description, timestamp, hasMade, notes, tags, tagsList, url }) => {\n\n    const [tagsToAdd, setTagsToAdd] = useState(\"\");\n    // const [quickTag, setQuickTag] = useState(\"\");\n    const [notesToAdd, setNotesToAdd] = useState(\"\");\n    const [isEditing, setIsEditing] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [newRating, setNewRating] = useState(rating)\n    const [currentTab, setCurrentTab] = useState(1)\n    const closeModal = () => [setOpen(false), setCurrentTab(1)]\n\n    // const add = (e, field) => {\n    //     e.preventDefault();\n    //     setIsEditing(false);\n    //     setQuickTag(\"\");\n\n    //     switch (field) {\n    //         case \"tags\":\n    //             let newTags = tagsToAdd;\n    //             if (newTags.length) {\n    //                 if (newTags.length === 1) {\n    //                     addItems(docID, \"tags\", newTags);\n    //                 } else {\n    //                     newTags = newTags.split(\",\")\n    //                     newTags.forEach(tag => {\n    //                         addItems(docID, \"tags\", tag);\n    //                     });\n    //                 }\n    //                 setTagsToAdd(\"\");\n    //             }\n    //             break;\n    //         case \"notes\":\n    //             let newNotes = notesToAdd\n    //             if (newNotes.length) {\n    //                 let newNotes = notesToAdd.split(\"\\n\\n\");\n    //                 newNotes.forEach(note => {\n    //                     addItems(docID, \"notes\", note);\n    //                 });\n    //                 setNotesToAdd(\"\");\n    //             }\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }\n\n    // const remove = (e, field) => {\n    //     e.preventDefault();\n    //     let itemToRemove = e.target.closest(\"li\").textContent.slice(0, -1);\n\n    //     switch (field) {\n    //         case \"tags\":\n    //             removeItems(docID, \"tags\", itemToRemove)\n    //             break;\n    //         case \"notes\":\n    //             removeItems(docID, \"notes\", itemToRemove)\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }\n\n    // const ratingChanged = (rating) => {\n    //     setNewRating(rating)\n    //     updateRating(docID, rating)\n    // }\n\n    const renderTab1 = () => {\n        return (\n            <>\n                <div className=\"title\">\n                    <h2>{title}</h2>\n                </div>\n                <div className=\"title\">\n                    <p>Author: <strong><em>{author.length ? author : \"No Assigned Author\"}</em></strong></p>\n                </div>\n                <div className=\"rating-hasMade\">\n                    <div className=\"rating\">\n                        <StarRatings\n                            rating={newRating}\n                            starRatedColor=\"#f04a26\"\n                            starEmptyColor=\"#808080\"\n                            // changeRating={ratingChanged}\n                            numberOfStars={5}\n                            starDimension=\"25px\"\n                            starSpacing=\"3px\"\n                            name='rating'\n                        />\n                        <button \n                        // onClick={() => ratingChanged(0)}\n                        >Reset</button>\n                    </div>\n                    <div className=\"has-made\">\n                        <input type=\"checkbox\" className=\"check\" name=\"check\"\n                            value={hasMade}\n                            onChange={() => console.log(\"click\")}\n                            checked={hasMade}\n                        />\n                        <label\n                            htmlFor=\"check\"\n                            // onClick={() => updateItem(docID, hasMade)}\n                        >Cooked</label>\n                    </div>\n                </div>\n                <div className={description ? \"description\" : \"description description-em\"}>\n                    <ShowMoreText\n                        lines={5}\n                        more='Show more'\n                        less='Show less'\n                        anchorClass='description-anchor'\n                        expanded={false}\n                        width={0}\n                    >\n                        {description ? description : \"There is no description for this recipe.\"}\n                    </ShowMoreText>\n                </div>\n            </>\n        )\n    }\n\n    // const join = (value) => {\n    //     setQuickTag(value)\n    //     if (tagsToAdd.length === 0) {\n    //         setTagsToAdd(value)\n    //     } else {\n    //         let combinedTags = tagsToAdd + \",\" + value\n    //         setTagsToAdd(combinedTags)\n    //     }\n    // }\n\n    const renderTab2 = () => {\n        return (\n            <div className=\"tags-wrapper\">\n                <div className=\"tags-header\">\n                    <p><strong>Tagged As:</strong></p>\n                    {isEditing ? (\n                        <form\n                            // onSubmit={e => add(e, \"tags\")}\n                        >\n                            <div className=\"inner-form\">\n                                <textarea\n                                    name=\"tags\"\n                                    placeholder=\"Enter ',' delimited tags\"\n                                    rows=\"2\"\n                                    value={tagsToAdd}\n                                    onChange={e => setTagsToAdd(e.target.value)}\n                                />\n                                {/* <div className=\"dropdown\">\n                                    <div> */}\n                                {/* <select\n                                    value={quickTag}\n                                    onChange={e => join(e.currentTarget.value)}>\n                                    <option value=\"\" disabled={true}>Quick Add Tags</option>\n                                    {tagsList.map((tag, i) => (\n                                        <option\n                                            value={tag}\n                                            key={tag + i}\n                                        >{tag}</option>\n                                    ))}\n                                </select> */}\n                                {/* </div>\n                                </div> */}\n                            </div>\n                            <button\n                                type=\"submit\"\n                            >{tagsToAdd.length > 0 ? \"Submit\" : \"Close\"}</button>\n                        </form>\n                    ) : (\n                            <p className=\"add\" onClick={() => setIsEditing(true)}>+</p>\n                        )}\n                </div>\n                {tags.length > 0 ?\n                    (\n                        <ul className=\"tags\">\n                            {tags.map((tag, i) => (\n                                <li\n                                    key={docID}\n                                >{tag}\n                                    <div className=\"delete-tag\" \n                                    // onClick={(e) => remove(e, \"tags\")}\n                                    >\n                                        <span>x</span>\n                                    </div>\n                                </li>\n                            ))}\n                        </ul>\n                    )\n                    : (\n                        <p><em>This recipe has not been tagged yet</em></p>\n                    )\n                }\n                <div className=\"notes-wrapper\">\n                    <div className=\"notes\">\n                        {notes.length > 0 ? (\n                            <ol>\n                                {notes.map(note => (\n                                    <li\n                                        key={note}\n                                    >{note}\n                                        <div className=\"delete-note\" \n                                        // onClick={(e) => remove(e, \"notes\")}\n                                        >\n                                            <span>x</span>\n                                        </div>\n                                    </li>\n                                ))}\n                            </ol>\n                        ) : (\n                                <p><em>There are no notes for this recipe yet.</em></p>\n                            )}\n                    </div>\n                    <div className=\"add-notes\">\n                        <form\n                            // onSubmit={e => add(e, \"notes\")}\n                        >\n                            <textarea\n                                name=\"notes\"\n                                placeholder=\"Add additional notes here.\"\n                                rows=\"3\"\n                                value={notesToAdd}\n                                onChange={e => setNotesToAdd(e.target.value)}\n                            />\n                            <button type=\"submit\">Add Note</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-top\">\n                <img\n                    src={imgSrc ? imgSrc : \"./graphics/default_image.jpg\"}\n                    onClick={() => setOpen(o => !o)}\n                />\n                <Popup trigger={<span className=\"delete\"></span>} modal>\n                    {close => (\n                        <div className=\"delete-modal\">\n                            <button className=\"close\" onClick={close}>X</button>\n                            <div className=\"header\">Are You Sure that You Want to Delete this Recipe???</div>\n                            <button className=\"delete\" \n                            onClick={() => api.delete(docID)}\n                            >Delete this Recipe Entry</button>\n                        </div>\n                    )}\n                </Popup>\n            </div>\n            <div className=\"card-bottom\">\n                <div className=\"title-wrapper\">\n                    <h4 onClick={() => setOpen(o => !o)}>{title}</h4>\n                    <div className=\"rating-hasMade\">\n                        <div className=\"rating\">\n                            <StarRatings\n                                rating={newRating}\n                                starRatedColor=\"#f04a26\"\n                                starEmptyColor=\"#808080\"\n                                // changeRating={ratingChanged}\n                                numberOfStars={5}\n                                starDimension=\"22px\"\n                                starSpacing=\"2px\"\n                                name='rating'\n                            />\n                        </div>\n                        <div className=\"has-made\">\n                            <input type=\"checkbox\" className=\"check\" name=\"check\"\n                                value={hasMade}\n                                onChange={() => console.log(\"click\")}\n                                checked={hasMade}\n                            />\n                            <label\n                                htmlFor=\"check\"\n                                // onClick={() => updateItem(docID, hasMade)}\n                            >Cooked</label>\n                        </div>\n                    </div>\n                    {/* <p>Author: <strong><em>{author.length ? author : \"No Assigned Author\"}</em></strong></p> */}\n                </div>\n                <div className=\"link-wrapper\">\n                    <div className=\"link\">\n                        <a href={url} target=\"_blank\">Recipe Link</a>\n                    </div>\n                    <span className=\"timestamp\">Saved On: {moment(timestamp).format(\"MMMM Do YYYY\")}</span>\n                </div>\n            </div>\n\n            <Popup open={open} closeOnDocumentClick onClose={closeModal}>\n                <div className=\"modal recipe-modal\">\n                    <div className=\"recipe-modal-central\">\n                        <div className=\"recipe-modal-inner\">\n                            <button className=\"close\" onClick={closeModal}>X</button>\n                            <div className=\"modal-img\">\n                                <div className=\"modal-img-back\">\n                                    <img\n                                        src={imgSrc ? imgSrc : \"./graphics/default_image.jpg\"} />\n                                </div>\n                            </div>\n                            <div className=\"modal-info\">\n                                <div className=\"modal-info-inner\">\n                                    <div className=\"modal-info-inner-tabs\">\n                                        <ul>\n                                            <li className={currentTab === 1 ? \"active\" : \"\"}\n                                                onClick={() => setCurrentTab(1)}>\n                                                <h4>INFO</h4>\n                                            </li>\n                                            <li className={currentTab === 2 ? \"active\" : \"\"}\n                                                onClick={() => setCurrentTab(2)}>\n                                                <h4>TAGS/NOTES</h4>\n                                            </li>\n                                            <li>\n                                                <h4><a href={url} target=\"_blank\">GO TO RECIPE</a></h4>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div className=\"modal-info-text\">\n                                        {currentTab === 1 ? (\n                                            [renderTab1()]\n                                        ) : (\n                                                [renderTab2()]\n                                            )}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Popup>\n        </div>\n    );\n}\n\nexport default Card;","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/RecipeEntry.js",["49","50","51","52"],"import React, { useState, useRef } from 'react';\nimport Editable from \"./Editable\";\n// import firebase from \"../utils/firebase\";\n\nconst Card = ({ recipe, url, setRecipe, setIsOverlay, setUrl }) => {\n\n  const [title, setTitle] = useState(recipe.title);\n  const [imgSrc, setImgSrc] = useState(recipe.imgSrc);\n  const [description, setDescription] = useState(recipe.description);\n  const [author, setAuthor] = useState(recipe.author);\n  const [rating, setRating] = useState(0);\n  const [tags, setTags] = useState(recipe.tags);\n  const [allNotes, setAllNotes] = useState(\"\");\n  const [hasMade, setHasMade] = useState(false);\n  const inputRef = useRef();\n\n  const createEntry = () => {\n\n    let notes;\n\n    if (allNotes.length > 0) {\n      notes = allNotes.split(\"\\n\\n\")\n    } else {\n      notes = []\n    }\n\n    // firebase\n    //   .firestore()\n    //   .collection(\"recipes\")\n    //   .add({\n    //     title,\n    //     imgSrc,\n    //     author,\n    //     rating,\n    //     description,\n    //     timestamp: Date.now(),\n    //     tags,\n    //     hasMade,\n    //     notes,\n    //     url\n    //   })\n    setRecipe({})\n    setIsOverlay(false)\n    setUrl(\"\");\n  }\n\n  const splitTags = tags => {\n    let split = tags.split(\",\")\n    setTags(split)\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-top\">\n        {imgSrc ?\n          <img src={imgSrc} />\n          :\n          <Editable\n            text={imgSrc}\n            placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"image source\"\n              placeholder='Right click on image, and click \"copy image address\". Paste address here.'\n              rows=\"5\"\n              value={imgSrc}\n              onChange={e => setImgSrc(e.target.value)}\n            />\n          </Editable>\n        }\n      </div>\n      <div className=\"card-bottom\">\n        <div className=\"title-wrapper\">\n          <h3>Title:</h3>\n          <div>\n            <label htmlFor=\"has-made\">Has Made:</label>\n            <input type=\"checkbox\" id=\"has-made\" name=\"has-made\" value={hasMade} onClick={() => setHasMade(!hasMade)} />\n          </div>\n        </div>\n        <Editable\n          text={title}\n          placeholder=\"Click Here to Add Recipe Title\"\n          childRef={inputRef}\n          type=\"textarea\"\n        >\n          <textarea\n            ref={inputRef}\n            name=\"title\"\n            placeholder=\"Click Here to Add Recipe Title\"\n            rows=\"5\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n        </Editable>\n        <h3>Author:</h3>\n        <Editable\n          text={author}\n          placeholder=\"Click Here to Add Recipe Author\"\n          childRef={inputRef}\n          type=\"textarea\"\n        >\n          <textarea\n            ref={inputRef}\n            name=\"author\"\n            placeholder=\"Click Here to Add Recipe Author\"\n            rows=\"5\"\n            value={author}\n            onChange={e => setAuthor(e.target.value)}\n          />\n        </Editable>\n        <div className=\"description\">\n          <h3>Description:</h3>\n          <Editable\n            text={description}\n            placeholder=\"Click Here to Add Recipe Description\"\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"description\"\n              placeholder=\"Click Here to Add Recipe Description\"\n              rows=\"5\"\n              value={description}\n              onChange={e => setDescription(e.target.value)}\n            />\n          </Editable>\n        </div>\n        <div>\n          <h3>Tagged As:</h3>\n          <Editable\n            text={tags.join(\",\")}\n            placeholder=\"Click Here to Add Recipe Tags\"\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"tags\"\n              placeholder=\"Enter ',' separated tags here\"\n              rows=\"5\"\n              value={tags.join(\",\")}\n              onChange={e => splitTags(e.target.value)}\n            />\n          </Editable>\n        </div>\n        <div>\n          <h3>Additional Notes:</h3>\n          <Editable\n            text={allNotes}\n            placeholder=\"Click Here to Add Additional Notes\"\n            childRef={inputRef}\n            type=\"textarea\"\n          >\n            <textarea\n              ref={inputRef}\n              name=\"notes\"\n              placeholder=\"Add additional notes here.\"\n              rows=\"10\"\n              value={allNotes}\n              onChange={e => setAllNotes(e.target.value)}\n            />\n          </Editable>\n        </div>\n        <div className=\"link\">\n          <button onClick={createEntry} >Create Entry</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","/Users/TylerWinstead/Desktop/code/Dog-Ear_v2/client/src/Components/Editable.js",[],["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":11},{"ruleId":"59","severity":1,"message":"63","line":10,"column":10,"nodeType":"61","messageId":"62","endLine":10,"endColumn":24},{"ruleId":"59","severity":1,"message":"64","line":11,"column":10,"nodeType":"61","messageId":"62","endLine":11,"endColumn":20},{"ruleId":"59","severity":1,"message":"65","line":12,"column":10,"nodeType":"61","messageId":"62","endLine":12,"endColumn":16},{"ruleId":"59","severity":1,"message":"66","line":13,"column":10,"nodeType":"61","messageId":"62","endLine":13,"endColumn":18},{"ruleId":"59","severity":1,"message":"67","line":15,"column":20,"nodeType":"61","messageId":"62","endLine":15,"endColumn":31},{"ruleId":"59","severity":1,"message":"68","line":39,"column":11,"nodeType":"61","messageId":"62","endLine":39,"endColumn":19},{"ruleId":"59","severity":1,"message":"68","line":67,"column":11,"nodeType":"61","messageId":"62","endLine":67,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":125,"column":21,"nodeType":"71","endLine":125,"endColumn":92},{"ruleId":"72","severity":1,"message":"73","line":1,"column":1,"nodeType":"74","endLine":26,"endColumn":2},{"ruleId":"59","severity":1,"message":"75","line":15,"column":23,"nodeType":"61","messageId":"62","endLine":15,"endColumn":35},{"ruleId":"69","severity":1,"message":"70","line":241,"column":17,"nodeType":"71","endLine":244,"endColumn":19},{"ruleId":"76","severity":1,"message":"77","line":289,"column":39,"nodeType":"78","endLine":289,"endColumn":54},{"ruleId":"69","severity":1,"message":"70","line":302,"column":37,"nodeType":"71","endLine":303,"endColumn":98},{"ruleId":"76","severity":1,"message":"77","line":319,"column":67,"nodeType":"78","endLine":319,"endColumn":82},{"ruleId":"59","severity":1,"message":"79","line":11,"column":10,"nodeType":"61","messageId":"62","endLine":11,"endColumn":16},{"ruleId":"59","severity":1,"message":"80","line":11,"column":18,"nodeType":"61","messageId":"62","endLine":11,"endColumn":27},{"ruleId":"59","severity":1,"message":"81","line":24,"column":7,"nodeType":"61","messageId":"62","endLine":24,"endColumn":12},{"ruleId":"69","severity":1,"message":"70","line":56,"column":11,"nodeType":"71","endLine":56,"endColumn":31},{"ruleId":"55","replacedBy":"82"},{"ruleId":"57","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'api' is defined but never used.","Identifier","unusedVar","'crawlingStatus' is assigned a value but never used.","'allRecipes' is assigned a value but never used.","'taskID' is assigned a value but never used.","'uniqueID' is assigned a value but never used.","'setTagsList' is assigned a value but never used.","'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'setNewRating' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'rating' is assigned a value but never used.","'setRating' is assigned a value but never used.","'notes' is assigned a value but never used.",["84"],["85"],"no-global-assign","no-unsafe-negation"]